# ===========================================================
# Azure DevOps Pipeline (Public):
# ===========================================================

parameters:
  - name: environment_id
    type: string
    default: dev
    values: [cmn, dev, stg, prd]
  - name: project_name
    type: string
    default: bft
  - name: email
    type: string
    default: ""     
  - name: management_group_id
    type: string
    default: "/providers/Microsoft.Management/managementGroups/mg-bft-test"

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: azureServiceConnection
    value: snp-pipeline-api-wif
  - name: tfWorkingDir
    value: $(Build.SourcesDirectory)/terraform/public
  - name: vnet_type
    value: public
  # --- tfstate backend (azurerm) ---
  - name: tfStateSubscriptionId
    value: c980fbe6-0c94-4e34-894c-476288b68cd3
  - name: tfStateResourceGroup
    value: rg-api
  - name: tfStateStorageAccount
    value: strageapi
  - name: tfStateContainer
    value: tfstate
  - name: tfStateKeyPrefix
    value: subscription-api
  # 成功時に tfstate を削除するか（true削除）
  - name: deleteTfStateOnSuccess
    value: 'true'

stages:
  - stage: provision_public
    displayName: Provision (Public)
    jobs:
      - job: terraform_job_public
        displayName: Terraform apply (public)
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: Install Terraform 1.7.5
            inputs:
              terraformVersion: 1.7.5

          # サブスクリプション作成または既存採用 → finalSpokeSubscriptionId を設定
          - task: AzureCLI@2
            name: create_or_reuse_subscription
            displayName: Subscription (create or reuse)
            inputs:
              azureSubscription: $(azureServiceConnection)
              addSpnToEnvironment: true
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                $tfDir = "$(tfWorkingDir)"

                function Set-TerraformOidcEnv {
                  Remove-Item Env:\ARM_USE_AZCLI_AUTH -ErrorAction SilentlyContinue
                  $token = $env:idToken
                  if (-not $token) { $token = $env:AZURE_FEDERATED_TOKEN }
                  if (-not $token -and $env:AZURE_FEDERATED_TOKEN_FILE -and (Test-Path $env:AZURE_FEDERATED_TOKEN_FILE)) {
                    $token = Get-Content -Raw -Path $env:AZURE_FEDERATED_TOKEN_FILE
                  }
                  $spId = $env:servicePrincipalId
                  $ten  = $env:tenantId
                  Write-Host "[OIDC] idToken=" ([bool]$env:idToken) ", AZURE_FEDERATED_TOKEN=" ([bool]$env:AZURE_FEDERATED_TOKEN) ", tokenFile=" (($env:AZURE_FEDERATED_TOKEN_FILE) -and (Test-Path $env:AZURE_FEDERATED_TOKEN_FILE))
                  if (-not $token) { throw "OIDC token not found. Ensure WIF service connection and addSpnToEnvironment: true." }
                  if (-not $spId -or -not $ten) { throw "servicePrincipalId/tenantId not present." }
                  $env:ARM_USE_OIDC  = 'true'
                  $env:ARM_CLIENT_ID = $spId
                  $env:ARM_TENANT_ID = $ten
                  $env:ARM_OIDC_TOKEN = $token
                  Write-Host "[OIDC] Configured ARM_USE_OIDC for Terraform provider."
                }

                function Get-TfVar {
                  param([string]$Path,[string]$Key)
                  if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
                  $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
                  if (-not $line) { return "" }
                  $val = $line -replace "^\s*$Key\s*=\s*", ""
                  if ($val -match "#") { $val = ($val -split "#")[0] }
                  $val.Trim().Trim('"')
                }

                function Is-Guid([string]$s) { return $s -match '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$' }

                function Slugify([string]$s) {
                  if (-not $s) { return "" }
                  $t = $s.Trim().ToLower()
                  $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
                  $t = $t -replace "[^0-9a-z\-]", "-"
                  return $t.Trim("-")
                }

                function Build-AliasName([string]$project,[string]$env) {
                  $p1 = Slugify $project
                  $p2 = Slugify $env
                  $parts = @($p1,$p2) | Where-Object { $_ -and $_.Trim() -ne "" }
                  return ("alias-" + ($parts -join "-"))
                }

                function Get-AliasName($tfvarsPath) {
                  $explicit = Get-TfVar $tfvarsPath "subscription_alias_name"
                  if ($explicit) { return $explicit }
                  $projectParam = "${{ parameters.project_name }}"
                  $envId   = "${{ parameters.environment_id }}"
                  $aliasName = Build-AliasName $projectParam $envId
                  if (-not $aliasName) { throw "cannot build alias name (check parameters: project_name/environment_id)" }
                  return $aliasName
                }

                Set-TerraformOidcEnv

                $tfvars = Join-Path $tfDir "terraform.tfvars"
                $hubSubId = Get-TfVar $tfvars "hub_subscription_id"
                if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }
                $createSub = Get-TfVar $tfvars "create_subscription"
                $finalSubId = Get-TfVar $tfvars "spoke_subscription_id"

                Push-Location $tfDir
                try {
                  # --- tfstate backend init (AAD/RBAC) ---
                  $key = "$(tfStateKeyPrefix)/$(vnet_type)/${{ parameters.project_name }}-${{ parameters.environment_id }}.tfstate"
                  $backendArgs = @(
                    "-backend-config=subscription_id=$(tfStateSubscriptionId)",
                    "-backend-config=resource_group_name=$(tfStateResourceGroup)",
                    "-backend-config=storage_account_name=$(tfStateStorageAccount)",
                    "-backend-config=container_name=$(tfStateContainer)",
                    "-backend-config=key=$key",
                    "-backend-config=use_azuread_auth=true"
                  )
                  terraform init -no-color -input=false -reconfigure @backendArgs

                  if ($createSub -eq "true") {
                    terraform apply -no-color -input=false -auto-approve -target "azapi_resource.subscription[0]"
                    if ($LASTEXITCODE -ne 0) { throw "subscription create failed" }

                    terraform apply -no-color -input=false -auto-approve -target "data.azapi_resource.subscription_get[0]"
                    if ($LASTEXITCODE -ne 0) { throw "read alias (data) failed" }

                    $createdSubId = $null
                    $aliasName = Get-AliasName $tfvars
                    for ($i=1; $i -le 36 -and -not $createdSubId; $i++) {
                      try { $raw = terraform output -raw created_subscription_id 2>$null; if ($raw -and (Is-Guid $raw)) { $createdSubId = $raw } } catch {}
                      if (-not $createdSubId -and $aliasName) {
                        $createdSubId = az rest --method get --uri ("https://management.azure.com/providers/Microsoft.Subscription/aliases/$aliasName?api-version=2021-10-01") --query "properties.subscriptionId" -o tsv 2>$null
                      }
                      if (-not $createdSubId) { Write-Host "[Step0] Waiting subscriptionId... ($i/36)"; Start-Sleep -Seconds 10 }
                    }
                    if (-not $createdSubId) { throw "created_subscription_id could not be retrieved after creation (timed out)." }

                    for ($j=1; $j -le 60; $j++) {
                      az account list --refresh 1>$null 2>$null
                      az account show --subscription $createdSubId -o none 2>$null
                      if ($LASTEXITCODE -eq 0) { break }
                      Start-Sleep -Seconds 10
                    }
                    Write-Host "Created SubscriptionId: $createdSubId"
                    Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$createdSubId"
                  } elseif ($createSub -eq "false") {
                    if (-not $finalSubId) { throw "spoke_subscription_id missing for existing subscription use." }
                    if (-not (Is-Guid $finalSubId)) { throw "spoke_subscription_id must be a GUID. Actual: $finalSubId" }
                    Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
                  } else { throw "create_subscription must be true or false in tfvars." }

                  Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
                } finally { Pop-Location }
            env:
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: $(vnet_type)
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}

          # apply main.tf（フル適用）
          - task: AzureCLI@2
            displayName: Terraform apply (public)
            inputs:
              azureSubscription: $(azureServiceConnection)
              addSpnToEnvironment: true
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'

                function Set-TerraformOidcEnv {
                  Remove-Item Env:\ARM_USE_AZCLI_AUTH -ErrorAction SilentlyContinue
                  $token = $env:idToken
                  if (-not $token) { $token = $env:AZURE_FEDERATED_TOKEN }
                  if (-not $token -and $env:AZURE_FEDERATED_TOKEN_FILE -and (Test-Path $env:AZURE_FEDERATED_TOKEN_FILE)) {
                    $token = Get-Content -Raw -Path $env:AZURE_FEDERATED_TOKEN_FILE
                  }
                  $spId = $env:servicePrincipalId
                  $ten  = $env:tenantId
                  Write-Host "[OIDC] idToken=" ([bool]$env:idToken) ", AZURE_FEDERATED_TOKEN=" ([bool]$env:AZURE_FEDERATED_TOKEN) ", tokenFile=" (($env:AZURE_FEDERATED_TOKEN_FILE) -and (Test-Path $env:AZURE_FEDERATED_TOKEN_FILE))
                  if (-not $token) { throw "OIDC token not found. Ensure WIF service connection and addSpnToEnvironment: true." }
                  if (-not $spId -or -not $ten) { throw "servicePrincipalId/tenantId not present." }
                  $env:ARM_USE_OIDC  = 'true'
                  $env:ARM_CLIENT_ID = $spId
                  $env:ARM_TENANT_ID = $ten
                  $env:ARM_OIDC_TOKEN = $token
                }

                Set-TerraformOidcEnv
                $env:ARM_SUBSCRIPTION_ID = "$(finalSpokeSubscriptionId)"

                # email(=subscription_owner_emails) をJSON 配列に補正
                $raw = '${{ parameters.email }}'
                Write-Host "DEBUG: raw email param: $raw"
                if ($raw -and $raw.Trim() -ne "") {
                  try {
                    $tmp = $raw | ConvertFrom-Json -ErrorAction Stop
                    if ($tmp -isnot [System.Array]) {
                      $env:TF_VAR_subscription_owner_emails = ('["' + ($raw.Trim('"')) + '"]')
                    } else {
                      $env:TF_VAR_subscription_owner_emails = $raw
                    }
                  } catch {
                    $env:TF_VAR_subscription_owner_emails = ('["' + ($raw.Trim('"')) + '"]')
                  }
                }
                Write-Host "DEBUG: TF_VAR_subscription_owner_emails: $env:TF_VAR_subscription_owner_emails"

                Push-Location "$(tfWorkingDir)"
                try {
                  # --- tfstate backend init (AAD/RBAC) ---
                  $key = "$(tfStateKeyPrefix)/$(vnet_type)/${{ parameters.project_name }}-${{ parameters.environment_id }}.tfstate"
                  $backendArgs = @(
                    "-backend-config=subscription_id=$(tfStateSubscriptionId)",
                    "-backend-config=resource_group_name=$(tfStateResourceGroup)",
                    "-backend-config=storage_account_name=$(tfStateStorageAccount)",
                    "-backend-config=container_name=$(tfStateContainer)",
                    "-backend-config=key=$key",
                    "-backend-config=use_azuread_auth=true"
                  )
                  terraform init -no-color -input=false -reconfigure @backendArgs

                  terraform plan -no-color -input=false -out=tfplan
                  if ($LASTEXITCODE -ne 0) { throw "Terraform plan failed" }

                  terraform apply -no-color -input=false -auto-approve tfplan
                  if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed" }
                } finally { Pop-Location }
            env:
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: $(vnet_type)
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false

          # 成功時のみ tfstate を削除（使い捨て運用向け）
          - task: AzureCLI@2
            displayName: Delete tfstate blob (on success)
            condition: and(succeeded(), eq(variables.deleteTfStateOnSuccess, 'true'))
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                $account   = "$(tfStateStorageAccount)"
                $container = "$(tfStateContainer)"
                $key       = "$(tfStateKeyPrefix)/$(vnet_type)/${{ parameters.project_name }}-${{ parameters.environment_id }}.tfstate"

                az account set -s "$(tfStateSubscriptionId)" 2>$null

                $exists = az storage blob exists --account-name $account --container-name $container --name $key --auth-mode login --query exists -o tsv
                if ($exists -ne "true") {
                  Write-Host "State blob not found: $key"
                  exit 0
                }

                az storage blob delete `
                  --account-name $account `
                  --container-name $container `
                  --name $key `
                  --delete-snapshots include `
                  --auth-mode login

                Write-Host "Deleted state: $container/$key"
