# billing-probe-ascii.yml
trigger: none
pr: none

pool:
  vmImage: windows-latest

variables:
  - name: System.Debug
    value: 'true'

stages:
- stage: probe_billing
  displayName: "Probe: snp-pipeline-api billing reachability"
  jobs:
  - job: run
    displayName: "WHOAMI / RBAC / Billing probes"
    steps:
    - task: AzureCLI@2
      displayName: "Probe billing roles (REST)"
      inputs:
        azureSubscription: 'snp-pipeline-api'    # <-- Service connection name
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference    = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          function Get-Json($url) {
            $out = az rest --method get --url $url 2>$null
            if (-not $out) { throw "az rest failed: $url" }
            return ($out | ConvertFrom-Json)
          }

          # whoami
          $account  = az account show | ConvertFrom-Json
          $appId    = $account.user.name
          $tenantId = $account.tenantId
          Write-Host "== WHOAMI =="
          Write-Host "tenantId : $tenantId"
          Write-Host "appId    : $appId"

          $sp = az ad sp show --id $appId | ConvertFrom-Json
          $spObjId = $sp.id
          Write-Host "spObjId  : $spObjId"
          Write-Host ""

          # RBAC (reference)
          Write-Host "== RBAC at root (reference) =="
          az role assignment list --assignee $appId --all -o table
          Write-Host ""

          $api = "2024-04-01"
          $found = @()

          # Billing accounts
          try {
            $accs = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts?api-version=$api").value
          } catch {
            throw "Cannot list billingAccounts. Likely missing Billing Account reader-level permission."
          }

          if (-not $accs -or $accs.Count -eq 0) {
            throw "No billingAccounts visible. Missing permissions."
          }

          foreach ($acc in $accs) {
            $accName = $acc.name
            $accDisp = $acc.properties.displayName
            Write-Host ">> BillingAccount: $accDisp (name=$accName)"

            # account scope roles
            $rolesA = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts/$accName/billingRoleAssignments?api-version=$api").value
            $mineA  = $rolesA | Where-Object { $_.properties.principalId -eq $spObjId } | ForEach-Object {
              [PSCustomObject]@{ Scope="BillingAccount"; ScopeName=$accName; RoleDefinitionId=$_.properties.roleDefinitionId; PrincipalId=$_.properties.principalId }
            }
            if ($mineA) { $found += $mineA }

            # profiles
            $profiles = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts/$accName/billingProfiles?api-version=$api").value
            foreach ($p in $profiles) {
              $pname = $p.name
              $pdisp = $p.properties.displayName
              Write-Host "   - BillingProfile: $pdisp (name=$pname)"

              $rolesP = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts/$accName/billingProfiles/$pname/billingRoleAssignments?api-version=$api").value
              $mineP  = $rolesP | Where-Object { $_.properties.principalId -eq $spObjId } | ForEach-Object {
                [PSCustomObject]@{ Scope="BillingProfile"; ScopeName="$accName/$pname"; RoleDefinitionId=$_.properties.roleDefinitionId; PrincipalId=$_.properties.principalId }
              }
              if ($mineP) { $found += $mineP }

              # invoice sections
              $invoices = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts/$accName/billingProfiles/$pname/invoiceSections?api-version=$api").value
              foreach ($iv in $invoices) {
                $ivname = $iv.name
                $ivdisp = $iv.properties.displayName
                Write-Host "       * InvoiceSection: $ivdisp (name=$ivname)"

                $rolesI = (Get-Json "https://management.azure.com/providers/Microsoft.Billing/billingAccounts/$accName/billingProfiles/$pname/invoiceSections/$ivname/billingRoleAssignments?api-version=$api").value
                $mineI  = $rolesI | Where-Object { $_.properties.principalId -eq $spObjId } | ForEach-Object {
                  [PSCustomObject]@{ Scope="InvoiceSection"; ScopeName="$accName/$pname/$ivname"; RoleDefinitionId=$_.properties.roleDefinitionId; PrincipalId=$_.properties.principalId }
                }
                if ($mineI) { $found += $mineI }
              }
            }
          }

          Write-Host ""
          Write-Host "== Billing role assignments for this SP =="
          if ($found.Count -gt 0) {
            $found | Sort-Object Scope, ScopeName | Format-Table -AutoSize
          } else {
            Write-Error "No billing roles found for this SP at any scope (Account/Profile/InvoiceSection)."
          }

          $hasInvoice = $found | Where-Object { $_.Scope -eq "InvoiceSection" }
          if (-not $hasInvoice) {
            throw "No role at InvoiceSection scope. Subscription creation via alias will fail."
          }

          Write-Host ""
          Write-Host "OK: Found at least one InvoiceSection-scope billing role for this SP."
