parameters:
- name: environment_id
  type: string
  default: dev
  values: [cmn, dev, stg, prd]
- name: project_name
  type: string
  default: bft
- name: email
  type: string
  default: ""
- name: vnet_type
  type: string
  default: private
  values: [private, public]

trigger: []
pr: []

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: USE_TARGETED_APPLY
    value: true
  - name: azureServiceConnection
    value: snp-pipeline-api-wif
  - name: vnet_type
    value: ${{ parameters.vnet_type }}

stages:
- stage: provision_all
  displayName: Provision Subscription + Network
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: Subscription (create or reuse)
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        env:
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            $tfvars = Join-Path $tfDir "terraform.tfvars"
            $hubSubId = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }
            $finalSubId = Get-TfVar $tfvars "spoke_subscription_id"
            if (-not $finalSubId) { throw "spoke_subscription_id missing." }
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"

      # Step0.5: PIM（Subscription作成後、RG前。PIMのみapply）
      - task: AzureCLI@2
        displayName: Step0.5 - PIM Only
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              # ↓ここは絶対に一行で書いてください（途中で改行やバックスラッシュ・バッククォートを入れない）
              terraform apply -no-color -input=false -auto-approve -target=module.pim
              if ($LASTEXITCODE -ne 0) { throw "PIM apply failed" }
            } finally { Pop-Location }

      # Step1: Resource Group
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { return "" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Slugify([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim().ToLower()
              $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
              $t = $t -replace "[^0-9a-z\-]", "-"
              return $t.Trim("-")
            }
            function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
              $p1 = Slugify $project
              $p2raw = Slugify $purpose
              $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
              $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
              return ($parts -join "-")
            }
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            $tfvars = Join-Path $tfDir "terraform.tfvars"
            $projectParam = "${{ parameters.project_name }}"
            $purpose = Get-TfVar $tfvars "purpose_name"
            $envId   = "${{ parameters.environment_id }}"
            $regionCode = Get-TfVar $tfvars "region_code"
            $seq     = Get-TfVar $tfvars "sequence"
            $base    = Build-Base $projectParam $purpose $envId $regionCode $seq
            $expectedRgName = "rg-$base"
            $rgId = "/subscriptions/$env:ARM_SUBSCRIPTION_ID/resourceGroups/$expectedRgName"
            Push-Location $tfDir
            try {
              terraform init -no-color -input=false
              terraform state show azurerm_resource_group.rg 1>$null 2>$null
              if ($LASTEXITCODE -ne 0) {
                $exists = az group exists --name $expectedRgName --subscription $env:ARM_SUBSCRIPTION_ID
                if ($exists -eq "true") {
                  Write-Host "[Step1] Importing existing RG: $rgId"
                  terraform import -no-color azurerm_resource_group.rg $rgId
                  if ($LASTEXITCODE -ne 0) { throw "terraform import RG failed" }
                }
              }
              terraform apply -no-color -input=false -auto-approve -target azurerm_resource_group.rg
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network.vnet
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve `
                -target azurerm_network_security_group.subnet_nsg `
                -target azurerm_subnet.subnet `
                -target azurerm_subnet_network_security_group_association.subnet_assoc `
                -target azurerm_network_security_group.bastion_nsg `
                -target azurerm_subnet.bastion_subnet `
                -target azurerm_subnet_network_security_group_association.bastion_assoc
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4: Route Table（private のみ）
      - task: AzureCLI@2
        displayName: Step4 - Route Table (private only)
        condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve `
                -target azurerm_route_table.route_table_private `
                -target azurerm_route.route_default_to_gateway `
                -target azurerm_route.route_kms1 `
                -target azurerm_route.route_kms2 `
                -target azurerm_route.route_kms3 `
                -target azurerm_subnet_route_table_association.subnet_rt_assoc
              if ($LASTEXITCODE -ne 0) { throw "Route table apply failed" }
            } finally { Pop-Location }

      # Step6: Bastion（public/private 共通）
      - task: AzureCLI@2
        displayName: Step6 - Bastion (all)
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false

              # 1) Bastion PIP
              terraform apply -no-color -input=false -auto-approve -target azurerm_public_ip.bastion_pip
              if ($LASTEXITCODE -ne 0) { throw "Bastion PIP creation failed" }

              # 2) Bastion Host
              terraform apply -no-color -input=false -auto-approve -target azurerm_bastion_host.bastion
              if ($LASTEXITCODE -ne 0) { throw "Bastion Host creation failed" }
            } finally { Pop-Location }

      # Step7a: Peering Hub -> Spoke（private のみ）
      - task: AzureCLI@2
        displayName: Step7a - Peering Hub->Spoke
        condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
          HUB_SUBSCRIPTION_ID: $(hubSubscriptionId)
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:HUB_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network_peering.hub_to_spoke
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step7b: Peering Spoke->Hub（private のみ）
      - task: AzureCLI@2
        displayName: Step7b - Peering Spoke->Hub
        condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network_peering.spoke_to_hub
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }
