parameters:
- name: environment_id
  type: string
  default: dev
  values:
  - cmn
  - dev
  - stg
  - prd
- name: project_name
  type: string
  default: bft   # Functionから来れば上書きされる
- name: email
  type: string
  default: ""     # 将来拡張用。現時点は受け取りのみ。
# 追加: VNet Type（Function から渡る）※将来の分岐用
- name: vnet_type
  type: string
  default: private
  values:
  - private
  - public

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true
  - name: azureServiceConnection
    value: snp-pipeline-api-wif

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Simplified)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        env:
          # Step0はTF実行する場面がある（alias作成）ので明示
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Write-Host "[Step0] Terraform dir: $tfDir"

            # 受信値確認
            $projectParam = "${{ parameters.project_name }}"
            Write-Host "[Step0] project_name: '$projectParam'"
            Write-Host "[Step0] environment_id: $env:TF_VAR_environment_id"
            Write-Host "[Step0] vnet_type: $env:TF_VAR_vnet_type"
            Write-Host "[Step0] email (future use): '${{ parameters.email }}'"

            # --- utils（既存） ---
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Slugify([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim().ToLower()
              $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
              $t = $t -replace "[^0-9a-z\-]", "-"
              return $t.Trim("-")
            }
            function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
              $p1 = Slugify $project
              $p2raw = Slugify $purpose
              $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
              $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
              return ($parts -join "-")
            }
            function Derive-Base-From-Name([string]$name,[string]$prefix) {
              if (-not $name) { return "" }
              $n = $name
              if ($prefix -and $n.ToLower().StartsWith(($prefix + "-"))) { $n = $n.Substring($prefix.Length + 1) }
              return Slugify $n
            }
            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try {
                  $v = & $cmd
                  if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
                } catch {}
              }
              return ""
            }
            function Wait-For-ARM([string]$SubId, [int]$Seconds = 240) {
              $tries = [Math]::Ceiling($Seconds / 10)
              for ($i=1; $i -le $tries; $i++) {
                try {
                  az rest --method get --url "https://management.azure.com/subscriptions/$SubId?api-version=2020-01-01" | Out-Null
                  Write-Host "[Step0] ARM visibility confirmed"
                  return
                } catch {
                  Write-Host "[Step0] waiting ARM visibility... ($i/$tries)"
                  Start-Sleep -Seconds 10
                }
              }
              throw "Subscription not visible in ARM after $Seconds seconds: $SubId"
            }
            function Wait-For-AzCliVisibility([string]$SubId, [int]$MaxMinutes = 10) {
              $max = [Math]::Ceiling(($MaxMinutes*60) / 15)
              for ($i=1; $i -le $max; $i++) {
                $hit = az account list --refresh --query "[?id=='$SubId'].id" -o tsv
                $tokenOk = $false
                try { az account get-access-token --subscription $SubId -o none 2>$null; if ($LASTEXITCODE -eq 0) { $tokenOk = $true } } catch {}
                if ($hit -and $tokenOk) {
                  Write-Host "[Step0] Azure CLI visibility confirmed"
                  return
                }
                Write-Host "[Step0] waiting Azure CLI visibility... ($i/$max)"
                Start-Sleep -Seconds 15
              }
              throw "Azure CLI did not recognize subscription within $MaxMinutes minutes: $SubId"
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            # 入力値取得
            $aliasName   = Get-TfVar $tfvars "subscription_alias_name"
            $dispName    = Get-TfVar $tfvars "subscription_display_name"
            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"

            # 命名（省略: 既存ロジックそのまま）
            if (-not $aliasName -or -not $dispName) {
              $purpose = Get-TfVar $tfvars "purpose_name"
              $envId   = Get-TfVar $tfvars "environment_id"
              $rCode   = Get-TfVar $tfvars "region_code"
              $seq     = Get-TfVar $tfvars "sequence"
              $base    = Build-Base $projectParam $purpose $envId $rCode $seq
              if (-not $base) {
                $rgName = Get-TfVar $tfvars "rg_name"; if ($rgName) { $base = Derive-Base-From-Name $rgName "rg" }
              }
              if (-not $base) {
                $vnetName = Get-TfVar $tfvars "vnet_name"; if ($vnetName) { $base = Derive-Base-From-Name $vnetName "vnet" }
              }
              if (-not $base) { $base = "gen-" + (Get-Date -Format "yyyyMMddHHmmss") }
              if (-not $aliasName) { $aliasName = "sub-$base" }
              if (-not $dispName)  { $dispName  = "sub-$base" }
              Write-Host "[Step0] alias/display auto: $aliasName"
            }

            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }
            Write-Host "[Step0] Parsed: create_subscription=$createFlag alias=$aliasName display=$dispName existingSpokeId='$spokeIdInTf' hub_subscription_id=$hubSubId"

            $finalSubId = ""
            $aliasCreatedNew = "false"

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須" }
              $finalSubId = $spokeIdInTf
              Write-Host "[Step0] Using existing subscription: $finalSubId"
            } else {
              if ($spokeIdInTf) {
                Write-Warning "[Step0] create_subscription=true ですが既存IDを優先します。"
                $finalSubId = $spokeIdInTf
              } else {
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  Write-Host "[Step0] Alias exists. Reuse subscriptionId=$reuseId"
                  $finalSubId = $reuseId
                } else {
                  Push-Location $tfDir
                  try {
                    terraform init -no-color -input=false
                    if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
                    $vars = @("-var", "subscription_alias_name=$aliasName", "-var", "subscription_display_name=$dispName")
                    terraform apply -no-color -input=false -auto-approve -target azapi_resource.subscription[0] @vars
                    if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }

                    $subOut = Get-SubscriptionIdFromAlias $aliasName
                    if (-not $subOut) { $subOut = terraform output -raw subscription_id 2>$null }
                    if (-not $subOut) { throw "Could not resolve subscription id after creation." }
                    $finalSubId = $subOut.Trim()
                    $aliasCreatedNew = "true"

                    terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                    if ($LASTEXITCODE -eq 0) { terraform state rm azapi_resource.subscription[0] | Out-Null }

                    @(
                      'create_subscription = false'
                      'spoke_subscription_id = "' + $finalSubId + '"'
                    ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")
                    Write-Host "[Step0] override.auto.tfvars written."
                  } finally { Pop-Location }
                  Wait-For-ARM $finalSubId 240
                  Wait-For-AzCliVisibility $finalSubId 10
                }
              }
            }

            if (-not $finalSubId) { throw "final subscription id could not be resolved." }

            # パイプライン変数設定（後続 Step は env で参照）
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew]$aliasCreatedNew"
            Write-Host "[Step0] Resolved finalSpokeSubscriptionId=$finalSubId (aliasCreatedNew=$aliasCreatedNew)"

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)   # ← env にバインド
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $subId = $env:ARM_SUBSCRIPTION_ID
            if (-not $subId) { throw "ARM_SUBSCRIPTION_ID env not set" }

            # 短期リトライで CLI 認識/トークン確認
            $ok = $false
