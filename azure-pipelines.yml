# subscription-api / azure-pipelines.yml
trigger: none
pr: none

pool:
  name: Default

variables:
  - name: System.Debug
    value: 'true'

stages:
# =========================================================
# Stage0: Subscription (Create via AzAPI)
# =========================================================
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    steps:
    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $clientId = az account show --query user.name -o tsv
          $tenantId = az account show --query tenantId -o tsv
          $subName  = az account show --query name -o tsv
          $subId    = az account show --query id -o tsv

          $sp      = az ad sp show --id $clientId --only-show-errors
          $spJson  = $sp | ConvertFrom-Json
          $spObjId = $spJson.id
          $spName  = $spJson.displayName

          Write-Host "== Service Connection =="
          Write-Host "tenantId    : $tenantId"
          Write-Host "subscription: $subName ($subId)"
          Write-Host "clientId    : $clientId"
          Write-Host "spObjectId  : $spObjId"
          Write-Host "spName      : $spName"
          Write-Host ""
          Write-Host "== Current role assignments for this SP (all scopes) =="
          az role assignment list --assignee $spObjId --all -o table

    - task: AzureCLI@2
      name: tf
      displayName: 'Terraform init/plan/apply (Stage0)'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $stageDir = "$(Build.SourcesDirectory)\terraform\stage0-subscription"
          $tfvars   = "$(Build.SourcesDirectory)\terraform\stage0-subscription\terraform.tfvars"

          function Get-AliasNameFromTfvars([string]$Path) {
            if (-not (Test-Path -LiteralPath $Path)) { return "" }
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match '^\s*subscription_alias_name\s*=' } | Select-Object -First 1
            if ($line) { return ($line -replace '^\s*subscription_alias_name\s*=\s*"?([^"]+)"?\s*$', '$1') }
            return ""
          }

          function Get-SubIdViaAz([string]$AliasName) {
            if ([string]::IsNullOrWhiteSpace($AliasName)) { return "" }
            try {
              $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            try {
              $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
              $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            return ""
          }

          function Wait-SubscriptionReady([string]$AliasName, [int]$MaxSeconds, [int]$IntervalSeconds) {
            $deadline = (Get-Date).AddSeconds($MaxSeconds)
            while ((Get-Date) -lt $deadline) {
              $id = ""
              try {
                $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              try {
                $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
                $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              Start-Sleep -Seconds $IntervalSeconds
            }
            return ""
          }

          if (-not (Test-Path -LiteralPath $tfvars)) { throw ("terraform.tfvars not found: " + $tfvars) }

          $aliasName = Get-AliasNameFromTfvars -Path $tfvars
          if ([string]::IsNullOrWhiteSpace($aliasName)) { throw "subscription_alias_name is empty in tfvars. Set it first." }

          # 次段でも参照できるよう alias を出力
          Write-Host ("##vso[task.setvariable variable=subscriptionAlias;isOutput=true]" + $aliasName)

          # 既存 alias ならスキップ
          $existingSubId = Get-SubIdViaAz -AliasName $aliasName
          if ($existingSubId) {
            Write-Host "Alias already exists. Skip Terraform. alias=$aliasName subId=$existingSubId"
            Write-Host ("subscriptionId=" + $existingSubId)
            Write-Host ("##vso[task.setvariable variable=subscriptionId;isOutput=true]" + $existingSubId)
            return
          }

          $orig = Get-Location
          trap {
            Set-Location $orig
            throw
          }

          Set-Location $stageDir
          terraform init

          $rid = "/providers/Microsoft.Subscription/aliases/$aliasName"
          terraform import -no-color azapi_resource.subscription $rid 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "terraform import skipped." }

          terraform plan -var-file="$tfvars" -out plan.out
          terraform apply -auto-approve plan.out
          Set-Location $orig

          # output → 取得できなければ 6 分輪読
          $subId = ""
          try { $subId = terraform -chdir="$stageDir" output -raw subscription_id } catch {}
          if (-not $subId) {
            $subId = Wait-SubscriptionReady -AliasName $aliasName -MaxSeconds 360 -IntervalSeconds 10
          }

          if ($subId) {
            Write-Host ("subscriptionId=" + $subId)
            Write-Host ("##vso[task.setvariable variable=subscriptionId;isOutput=true]" + $subId)
            Write-Host "✅ Resolved subscriptionId: $subId"
          } else {
            Write-Warning "subscriptionId not resolved in Stage0."
            Write-Host ("##vso[task.setvariable variable=subscriptionId;isOutput=true]")
          }

# =========================================================
# Stage1〜4: 下流はまだ placeholder
# =========================================================
- stage: stage1_rg
  displayName: "Stage1 - Resource Group (placeholder)"
  dependsOn: stage0_subscription
  condition: succeeded()
  jobs:
  - job: placeholder_rg
    steps:
    - script: echo "[RG] placeholder. SubscriptionId=$(subscriptionId)"
      displayName: "[RG] placeholder"

- stage: stage2_vnet
  displayName: "Stage2 - VNet (placeholder)"
  dependsOn: stage1_rg
  condition: succeeded()
  jobs:
  - job: placeholder_vnet
    steps:
    - script: echo "[VNET] placeholder. SubscriptionId=$(subscriptionId)"
      displayName: "[VNET] placeholder"

- stage: stage3_subnet
  displayName: "Stage3 - Subnet (placeholder)"
  dependsOn: stage2_vnet
  condition: succeeded()
  jobs:
  - job: placeholder_subnet
    steps:
    - script: echo "[SUBNET] placeholder. SubscriptionId=$(subscriptionId)"
      displayName: "[SUBNET] placeholder"

- stage: stage4a_peering_s2h
  displayName: "Stage4a - Peering Spoke->Hub (placeholder)"
  dependsOn: stage3_subnet
  condition: succeeded()
  jobs:
  - job: placeholder_peering_s2h
    steps:
    - script: echo "[PEERING S->H] placeholder. SubscriptionId=$(subscriptionId)"
      displayName: "[PEERING S->H] placeholder"

- stage: stage4b_peering_h2s
  displayName: "Stage4b - Peering Hub->Spoke (placeholder)"
  dependsOn: stage4a_peering_s2h
  condition: succeeded()
  jobs:
  - job: placeholder_peering_h2s
    steps:
    - script: echo "[PEERING H->S] placeholder. SubscriptionId=$(subscriptionId)"
      displayName: "[PEERING H->S] placeholder"
