trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  # 初回はフル適用推奨（state/outputs を確実に反映）
  - name: USE_TARGETED_APPLY
    value: false

stages:
- stage: provision_all
  displayName: Provision Network in Existing Subscription
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step1: Resource Group
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            # 変数汚染を避ける（TF_VAR_* と *.auto.tfvars を除去）
            "TF_VAR_project_name","TF_VAR_purpose_name","TF_VAR_environment_id","TF_VAR_region_code","TF_VAR_sequence","TF_VAR_spoke_subscription_id" |
              ForEach-Object { if (Test-Path env:$_) { Remove-Item env:$_ -ErrorAction SilentlyContinue } }
            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            # tfvars から Spoke サブスクリプションID を取得して CLI のコンテキストを合わせる
            $spokeId = Get-TfVar $varFile "spoke_subscription_id"
            if (-not $spokeId) { throw "spoke_subscription_id not set in terraform.tfvars" }
            az account set --subscription $spokeId

            # デバッグ: tfvars の中身（命名値が見えること）
            Write-Host "----- terraform.tfvars (begin) -----"
            Get-Content $varFile | Write-Host
            Write-Host "----- terraform.tfvars (end) -----"

            Push-Location $tfDir
            try {
              terraform version
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (RG)" }

              # 命名の可視化
              terraform output -no-color debug_project_name
              terraform output -no-color debug_purpose_name
              terraform output -no-color debug_project_slug
              terraform output -no-color debug_purpose_slug
              terraform output -no-color base_naming
              terraform output -no-color rg_expected_name
              terraform output -no-color spoke_rg_name
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            $spokeId = Get-TfVar $varFile "spoke_subscription_id"
            if (-not $spokeId) { throw "spoke_subscription_id not set in terraform.tfvars" }
            az account set --subscription $spokeId

            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            Push-Location $tfDir
            try {
              terraform version
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (VNet)" }

              terraform output -no-color vnet_expected_name
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            $spokeId = Get-TfVar $varFile "spoke_subscription_id"
            if (-not $spokeId) { throw "spoke_subscription_id not set in terraform.tfvars" }
            az account set --subscription $spokeId

            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            Push-Location $tfDir
            try {
              terraform version
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Subnet/NSG)" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke（Hub側で実行）
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            $hubSubId = Get-TfVar $varFile "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id not found in terraform.tfvars" }
            az account set --subscription $hubSubId

            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            Push-Location $tfDir
            try {
              terraform version
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Peering Hub->Spoke)" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub（Spoke 側で実行）
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            $spokeId = Get-TfVar $varFile "spoke_subscription_id"
            if (-not $spokeId) { throw "spoke_subscription_id not set in terraform.tfvars" }
            az account set --subscription $spokeId

            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            Push-Location $tfDir
            try {
              terraform version
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Peering Spoke->Hub)" }
            } finally { Pop-Location }