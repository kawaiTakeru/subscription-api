trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  # Remote backend 用（既存のストレージをセットしてください）
  - name: TF_BACKEND_RG
    value: ""          # 例: rg-tfstate-prd-jpe-001
  - name: TF_BACKEND_STORAGE
    value: ""          # 例: sttfstateprd001
  - name: TF_BACKEND_CONTAINER
    value: "tfstate"   # 既存のコンテナ名
  - name: TF_BACKEND_KEY
    value: "subscription-api/terraform.tfstate"  # state キー

stages:
- stage: provision_all
  displayName: Provision Subscription + Network
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: 既存サブスクリプション再利用（tfvars から ID を読み取り、以降に渡す）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (reuse)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Is-Guid([string]$s) {
              return $s -match '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $varFile)) { throw "terraform.tfvars missing: $varFile" }

            $spokeId   = Get-TfVar $varFile "spoke_subscription_id"
            $createRaw = Get-TfVar $varFile "create_subscription"
            $createFlg = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }

            if (-not $spokeId -and -not $createFlg) {
              throw "create_subscription=false の場合は spoke_subscription_id が必須です（tfvars を確認してください）"
            }
            if ($spokeId -and -not (Is-Guid $spokeId)) {
              throw "spoke_subscription_id is not a valid GUID: $spokeId"
            }

            if ($spokeId) {
              Write-Host "Reuse existing subscription: $spokeId"
              Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$spokeId"
            } else {
              throw "This pipeline assumes reuse path in Step0. 現在の tfvars を create_subscription=false + spoke_subscription_id で実行してください。"
            }

      # 共通: Terraform 実体パスを取得する関数と Backend init 関数
      - task: PowerShell@2
        displayName: Define helpers
        inputs:
          targetType: inline
          script: |
            $tfExe = Join-Path $env:AGENT_TOOLSDIRECTORY "terraform\1.7.5\x64\terraform.exe"
            if (-not (Test-Path $tfExe)) {
              $tfExe = (Get-Command terraform -ErrorAction Stop).Source
            }
            Write-Host "##vso[task.setvariable variable=TfExe]$tfExe"

            $backendRg   = "$(TF_BACKEND_RG)"
            $backendStg  = "$(TF_BACKEND_STORAGE)"
            $backendCont = "$(TF_BACKEND_CONTAINER)"
            $backendKey  = "$(TF_BACKEND_KEY)"
            if ($backendRg -and $backendStg -and $backendCont -and $backendKey) {
              Write-Host "##vso[task.setvariable variable=BackendReady]true"
            } else {
              Write-Warning "Backend variables are not fully set. Falling back to LOCAL state."
              Write-Host "##vso[task.setvariable variable=BackendReady]false"
            }

      # Step1: Resource Group（存在時は import してから apply）
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $subId = "$(finalSpokeSubscriptionId)"
            if (-not $subId) { throw "finalSpokeSubscriptionId not set from Step0" }
            az account set --subscription $subId

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            # Terraform 実体の明示指定
            $tfExe = "$(TfExe)"
            Write-Host "Using Terraform: $tfExe"
            & $tfExe -version

            # 影響しうる TF_VAR_* を解除、*.auto.tfvars の残骸を削除
            "TF_VAR_project_name","TF_VAR_purpose_name","TF_VAR_environment_id","TF_VAR_region_code","TF_VAR_sequence" |
              ForEach-Object { if (Test-Path env:$_) { Remove-Item env:$_ -ErrorAction SilentlyContinue } }
            Get-ChildItem -Path $tfDir -Filter "*.auto.tfvars" -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

            # 命名計算
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[\s_./\\]+", "-")
              return $t.ToLower()
            }
            $project    = To-Slug (Get-TfVar $varFile 'project_name')
            $purpose    = To-Slug (Get-TfVar $varFile 'purpose_name')
            $envId      = (Get-TfVar $varFile 'environment_id')
            $regionCode = (Get-TfVar $varFile 'region_code')
            $seq        = (Get-TfVar $varFile 'sequence')
            $base       = ($project,$purpose,$envId,$regionCode,$seq) -join '-'
            $rgName     = "rg-$base"
            Write-Host "Computed RG Name: $rgName"

            Push-Location $tfDir
            try {
              if ("$(BackendReady)" -eq "true") {
                & $tfExe init -no-color `
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE)" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" `
                  -backend-config="key=$(TF_BACKEND_KEY)" `
                  -reconfigure
              } else {
                & $tfExe init -no-color -reconfigure
              }

              # 既存 RG があれば import
              $rgExists = az group exists -n $rgName
              if ($rgExists -eq 'true') {
                $rgId = "/subscriptions/$subId/resourceGroups/$rgName"
                Write-Host "RG exists. Importing into state: $rgId"
                & $tfExe import -no-color 'azurerm_resource_group.rg' $rgId
                if ($LASTEXITCODE -ne 0) { throw "terraform import (RG) failed" }
              } else {
                Write-Host "RG does not exist. Terraform will create it."
              }

              & $tfExe apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (RG)" }

              # 命名確認（Terraform が見ている値を出力）
              & $tfExe output -no-color debug_project_name
              & $tfExe output -no-color debug_purpose_name
              & $tfExe output -no-color debug_project_slug
              & $tfExe output -no-color debug_purpose_slug
              & $tfExe output -no-color debug_base_parts
              & $tfExe output -no-color base_naming
              & $tfExe output -no-color rg_expected_name
              & $tfExe output -no-color spoke_rg_name
            } finally { Pop-Location }

      # Step2: VNet（存在時は import してから apply）
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $subId = "$(finalSpokeSubscriptionId)"
            if (-not $subId) { throw "finalSpokeSubscriptionId not set from Step0" }
            az account set --subscription $subId

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            $tfExe = "$(TfExe)"
            Write-Host "Using Terraform: $tfExe"
            & $tfExe -version

            # 名前再計算
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[\s_./\\]+", "-")
              return $t.ToLower()
            }
            $project    = To-Slug (Get-TfVar $varFile 'project_name')
            $purpose    = To-Slug (Get-TfVar $varFile 'purpose_name')
            $envId      = (Get-TfVar $varFile 'environment_id')
            $regionCode = (Get-TfVar $varFile 'region_code')
            $seq        = (Get-TfVar $varFile 'sequence')
            $base       = ($project,$purpose,$envId,$regionCode,$seq) -join '-'
            $rgName     = "rg-$base"
            $vnetName   = "vnet-$base"

            Push-Location $tfDir
            try {
              if ("$(BackendReady)" -eq "true") {
                & $tfExe init -no-color `
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE)" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" `
                  -backend-config="key=$(TF_BACKEND_KEY)" `
                  -reconfigure
              } else {
                & $tfExe init -no-color -reconfigure
              }

              # 既存 VNet があれば import
              $vExists = az network vnet list -g $rgName --query "[?name=='$vnetName'] | length(@)" -o tsv
              if ($vExists -eq '1') {
                $vnetId = "/subscriptions/$subId/resourceGroups/$rgName/providers/Microsoft.Network/virtualNetworks/$vnetName"
                Write-Host "VNet exists. Importing into state: $vnetId"
                & $tfExe import -no-color 'azurerm_virtual_network.vnet' $vnetId
                if ($LASTEXITCODE -ne 0) { throw "terraform import (VNet) failed" }
              } else {
                Write-Host "VNet does not exist. Terraform will create it."
              }

              & $tfExe apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (VNet)" }

              & $tfExe output -no-color vnet_expected_name
            } finally { Pop-Location }

      # Step3: Subnet + NSG（存在時は import してから apply）
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $subId = "$(finalSpokeSubscriptionId)"
            if (-not $subId) { throw "finalSpokeSubscriptionId not set from Step0" }
            az account set --subscription $subId

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            $tfExe = "$(TfExe)"
            Write-Host "Using Terraform: $tfExe"
            & $tfExe -version

            # 名前再計算
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[\s_./\\]+", "-")
              return $t.ToLower()
            }
            $project    = To-Slug (Get-TfVar $varFile 'project_name')
            $purpose    = To-Slug (Get-TfVar $varFile 'purpose_name')
            $envId      = (Get-TfVar $varFile 'environment_id')
            $regionCode = (Get-TfVar $varFile 'region_code')
            $seq        = (Get-TfVar $varFile 'sequence')
            $base       = ($project,$purpose,$envId,$regionCode,$seq) -join '-'
            $rgName     = "rg-$base"
            $vnetName   = "vnet-$base"
            $subnetName = "snet-$base"
            $nsgName    = "nsg-$base"

            Push-Location $tfDir
            try {
              if ("$(BackendReady)" -eq "true") {
                & $tfExe init -no-color `
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE)" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" `
                  -backend-config="key=$(TF_BACKEND_KEY)" `
                  -reconfigure
              } else {
                & $tfExe init -no-color -reconfigure
              }

              # 既存 NSG があれば import
              $nExists = az network nsg list -g $rgName --query "[?name=='$nsgName'] | length(@)" -o tsv
              if ($nExists -eq '1') {
                $nsgId = "/subscriptions/$subId/resourceGroups/$rgName/providers/Microsoft.Network/networkSecurityGroups/$nsgName"
                Write-Host "NSG exists. Importing into state: $nsgId"
                & $tfExe import -no-color 'azurerm_network_security_group.subnet_nsg' $nsgId
                if ($LASTEXITCODE -ne 0) { throw "terraform import (NSG) failed" }
              } else {
                Write-Host "NSG does not exist. Terraform will create it."
              }

              # 既存 Subnet があれば import
              $sExists = az network vnet subnet list -g $rgName --vnet-name $vnetName --query "[?name=='$subnetName'] | length(@)" -o tsv
              if ($sExists -eq '1') {
                $subnetId = "/subscriptions/$subId/resourceGroups/$rgName/providers/Microsoft.Network/virtualNetworks/$vnetName/subnets/$subnetName"
                Write-Host "Subnet exists. Importing into state: $subnetId"
                & $tfExe import -no-color 'azurerm_subnet.subnet' $subnetId
                if ($LASTEXITCODE -ne 0) { throw "terraform import (Subnet) failed" }
              } else {
                Write-Host "Subnet does not exist. Terraform will create it."
              }

              & $tfExe apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Subnet/NSG)" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke（Hub側）
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            $hubSubId = Get-TfVar $varFile "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id not found in tfvars" }
            az account set --subscription $hubSubId

            $tfExe = "$(TfExe)"
            Write-Host "Using Terraform: $tfExe"
            & $tfExe -version

            Push-Location $tfDir
            try {
              if ("$(BackendReady)" -eq "true") {
                & $tfExe init -no-color `
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE)" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" `
                  -backend-config="key=$(TF_BACKEND_KEY)" `
                  -reconfigure
              } else {
                & $tfExe init -no-color -reconfigure
              }

              & $tfExe apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Peering Hub->Spoke)" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub（Spoke側）
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $subId = "$(finalSpokeSubscriptionId)"
            if (-not $subId) { throw "finalSpokeSubscriptionId not set from Step0" }
            az account set --subscription $subId

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"

            $tfExe = "$(TfExe)"
            Write-Host "Using Terraform: $tfExe"
            & $tfExe -version

            Push-Location $tfDir
            try {
              if ("$(BackendReady)" -eq "true") {
                & $tfExe init -no-color `
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE)" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" `
                  -backend-config="key=$(TF_BACKEND_KEY)" `
                  -reconfigure
              } else {
                & $tfExe init -no-color -reconfigure
              }

              & $tfExe apply -no-color -auto-approve -var-file="$varFile"
              if ($LASTEXITCODE -ne 0) { throw "Terraform apply failed (Peering Spoke->Hub)" }
            } finally { Pop-Location }
