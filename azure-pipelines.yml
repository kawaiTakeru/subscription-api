# subscription-api / azure-pipelines.yml
# Simplified single-stage pipeline (parse-safe)
# Fixes:
#  - Removed complex helper here-string (was potential source of parse confusion if copy inserted hidden chars)
#  - Ensured only ASCII characters
#  - Consistent indentation (2 spaces under each mapping level)
#  - No inline comments after scalar values
#  - PowerShell Core only
#  - Minimal targeted apply logic in-place (simple function defined directly inside each script to avoid external file)

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true

stages:
- stage: provision_all
  displayName: Provision (Subscription->RG->VNet->Subnet->Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:

    - checkout: self

    - task: TerraformInstaller@1
      displayName: Install Terraform 1.7.5
      inputs:
        terraformVersion: 1.7.5

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: Show Agent Info

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
      displayName: Optional copy example tfvars
      continueOnError: true

    - task: AzureCLI@2
      displayName: WHOAMI (service connection)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $acct = az account show -o json | ConvertFrom-Json
          if (-not $acct) { throw "az account show failed" }
          Write-Host "tenantId      : $($acct.tenantId)"
          Write-Host "subscription  : $($acct.name)"
          Write-Host "subscriptionId: $($acct.id)"
          Write-Host "clientId      : $($acct.user.name)"

    - task: PowerShell@2
      name: prep
      displayName: Parse tfvars
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(Build.SourcesDirectory)\terraform"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfDir))  { throw "Terraform dir not found: $tfDir" }
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfvarsValue {
            param([string]$Path,[string]$Key)
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
            if (-not $line) { return "" }
            $v = $line -replace "^\s*$Key\s*=\s*", ""
            if ($v -match "#") { $v = ($v -split "#")[0] }
            $v.Trim().Trim('"')
          }

          $createSubscription = Get-TfvarsValue $tfvars "create_subscription"
          if ($createSubscription -match '^(?i:true|1)$') { $createSubscription = 'true' } else { $createSubscription = 'false' }
          $spokeSubInVars = Get-TfvarsValue $tfvars "spoke_subscription_id"
          $aliasName      = Get-TfvarsValue $tfvars "subscription_alias_name"

          Write-Host "Parsed: create_subscription=$createSubscription alias=$aliasName spoke_subscription_id=$spokeSubInVars"

          Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$createSubscription"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeSubInVars"

    - task: AzureCLI@2
      name: step0
      displayName: Step0 - Ensure Subscription
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $alias = "$(aliasName)"
          if (-not $alias) { throw "alias empty" }
          $targetAddress = "azapi_resource.subscription[0]"
          $aliasRid = "/providers/Microsoft.Subscription/aliases/$alias"

          function GetSubId {
            param([string]$a)
            if (-not $a) { return "" }
            try {
              $r = az account alias show --name $a --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $r) { return $r.Trim() }
            } catch {}
            try {
              $rid="/providers/Microsoft.Subscription/aliases/$a"
              $r = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $r) { return $r.Trim() }
            } catch {}
            return ""
          }

          function ImportState {
            param([string]$rid)
            try {
              Push-Location "$(tfDir)"
              terraform init -no-color | Out-Null
              terraform import -no-color $targetAddress $rid 2>$null
              if ($LASTEXITCODE -ne 0) { Write-Warning "import exit $LASTEXITCODE ignored"; $global:LASTEXITCODE=0 }
            } finally { Pop-Location }
          }

          Write-Host "Check existing alias..."
          $existing = GetSubId $alias
          if ($existing) {
            Write-Host "Alias exists subId=$existing"
            ImportState $aliasRid
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
            exit 0
          }

          Write-Host "Creating alias..."
          Push-Location "$(tfDir)"
          $created=$false
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "init failed" }
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -eq 0) { $created=$true }
          } catch {
            Write-Warning $_.Exception.Message
          } finally { Pop-Location }

          $subId=""
          for ($i=0; $i -lt 36 -and -not $subId; $i++) {
            $subId = GetSubId $alias
            if ($subId) { break }
            Start-Sleep -Seconds 10
          }
          if (-not $subId) { throw "SubscriptionId not resolved after 360s" }
          if (-not $created) { ImportState $aliasRid }
          Write-Host "subscriptionId=$subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          exit 0

    - task: PowerShell@2
      name: decideSub
      displayName: Decide Spoke Subscription ID
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromCreate = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromCreate) { $fromCreate } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") { throw "Subscription ID missing after creation." }
            throw "spoke_subscription_id must be set."
          }
          Write-Host "Using Spoke Subscription ID: $final"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"

    - task: AzureCLI@2
      displayName: Step1 - Resource Group
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $subId = "$(finalSpokeSubscriptionId)"
          if (-not $subId) { throw "finalSpokeSubscriptionId empty" }
          az account set --subscription $subId
          Push-Location "$(Build.SourcesDirectory)\terraform\stage1-rg"
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: Step2 - VNet
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $subId = "$(finalSpokeSubscriptionId)"
          az account set --subscription $subId
          Push-Location "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: Step3 - Subnet + NSG
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage3-subnet"
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: Step4a - Peering Hub->Spoke
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          # Hub subscription hard-coded (replace if needed)
          $hubSub = "7d1f78e5-bc6c-4018-847f-336ff47b9436"
          az account set --subscription $hubSub
          Push-Location "$(Build.SourcesDirectory)\terraform\stage4a-peering-hub-to-spoke"
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: Step4b - Peering Spoke->Hub
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage4b-peering-spoke-to-hub"
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: Verify Peering (spoke-to-hub)
      condition: succeeded()
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          # Adjust resource group / vnet names if variables exist (placeholder)
          # Example verification command below; modify to real names:
          Write-Host "Verification placeholder - provide actual RG/VNet if needed."