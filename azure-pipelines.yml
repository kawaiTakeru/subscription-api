# subscription-api / azure-pipelines.yml  (Single-stage, sequential steps)
# 要件:
#  1) 既存サブスクリプションがあればそのまま利用して RG -> VNet -> Subnet -> Peering
#  2) 無ければ (tfvars で create_subscription=true かつ spoke_subscription_id 空)
#     → Alias(=Subscription) 作成後に 1) の続き
# 改善点:
#  - 既存 Alias がある場合は Terraform で azapi_resource.subscription を管理しない
#    (import もしない) ⇒ 後続ステップで "Resource already exists" を回避
#  - 新規作成した場合のみ create_subscription=true を後続に伝播し、state で管理継続
#  - 後続ステップへは finalSpokeSubscriptionId を TF_VAR_spoke_subscription_id で注入
#  - 各ステップで TF_VAR_create_subscription を上書き (overrideCreateSubscription)
#  - Peering Hub->Spoke は Hub サブスクリプションへ CLI コンテキストを切替
#
# 使い方 (terraform/terraform.tfvars):
#  パターンA (既存流用):
#     create_subscription = false
#     spoke_subscription_id = "<既存 SubscriptionId>"
#  パターンB (新規作成):
#     create_subscription = true
#     spoke_subscription_id は空 (未記載または "")
#
# オプション: USE_TARGETED_APPLY=false にすれば常にフル apply (収束確認用)

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true

stages:
- stage: provision_all
  displayName: Provision (Subscription->RG->VNet->Subnet->Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:

    - checkout: self

    - task: TerraformInstaller@1
      displayName: Install Terraform 1.7.5
      inputs:
        terraformVersion: 1.7.5

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: Show Agent Info

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        Write-Host "Terraform Root: $tfDir"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
        Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
      displayName: Prepare tfvars (optional copy)
      continueOnError: true

    - task: PowerShell@2
      name: prep
      displayName: Parse tfvars / set initial variables
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(tfDir)"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfVar {
            param([string]$Path,[string]$Key)
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
            if (-not $line) { return "" }
            $val = $line -replace "^\s*$Key\s*=\s*", ""
            if ($val -match "#") { $val = ($val -split "#")[0] }
            $val.Trim().Trim('"')
          }

          $createRaw = Get-TfVar $tfvars "create_subscription"
          $create = if ($createRaw -match '^(?i:true|1)$') { 'true' } else { 'false' }
          $aliasName = Get-TfVar $tfvars "subscription_alias_name"
          $spokeId   = Get-TfVar $tfvars "spoke_subscription_id"
          $hubSub    = Get-TfVar $tfvars "hub_subscription_id"

            # Dump
          Write-Host "Parsed: create_subscription=$create alias=$aliasName spoke_subscription_id=$spokeId hub_subscription_id=$hubSub"

          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$create"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeId"
          Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSub"

    # Step0: 新規作成が必要な場合のみ (既存の場合は alias 解析して ID を取得するだけ)
    - task: AzureCLI@2
      name: step0
      displayName: Step0 - Ensure Subscription (alias create or lookup)
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $alias = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name missing in tfvars." }
          $tfDir = "$(tfDir)"
          $targetAddress = "azapi_resource.subscription[0]"
          $aliasRid = "/providers/Microsoft.Subscription/aliases/$alias"

          function GetSubId([string]$Alias) {
            if (-not $Alias) { return "" }
            foreach ($cmd in @(
              { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
              { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
            )) {
              try {
                $v = & $cmd
                if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
              } catch {}
            }
            return ""
          }

          $existing = GetSubId $alias
          if ($existing) {
            Write-Host "Alias exists (pre-existing). alias=$alias subId=$existing"
            # 既存の場合は import しない (create_subscription を後続で false に変更して扱わない)
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
            Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]true"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]false"
            exit 0
          }

          # 新規作成
          Write-Host "Creating subscription alias: $alias"
          Push-Location $tfDir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias) failed" }
          } finally { Pop-Location }

          # ポーリング (最大 6 分)
            $subId = ""
          for ($i=0; $i -lt 36 -and -not $subId; $i++) {
            $subId = GetSubId $alias
            if ($subId) { break }
            Start-Sleep -Seconds 10
          }
          if (-not $subId) { throw "SubscriptionId not resolved after 360s (alias=$alias)" }

          Write-Host "Created subscriptionId=$subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]false"
          Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]true"

    # Step0 をスキップした場合 (create_subscription=false か spoke_subscription_id 指定) でも ID 確定ロジックを共通化
    - task: PowerShell@2
      name: decideSub
      displayName: Decide / Normalize Subscription Flags
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromStep0 = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromStep0) { $fromStep0 } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") {
              throw "Subscription ID not resolved (Step0 probably failed)."
            } else {
              throw "spoke_subscription_id must be set in tfvars when create_subscription=false."
            }
          }

          # aliasPreExisting が空 (Step0 スキップ時) の判定
          $aliasPreExisting = "$(step0.aliasPreExisting)"
          if (-not $aliasPreExisting) {
            # Step0 スキップ (= 既存 ID 指定 or create_subscription=false)
            $aliasPreExisting = "true"
          }

          # overrideCreateSubscription の決定
          # 既存 alias (import していない) → false
          # 新規作成 (今回 alias 作った)   → true (引き続き state 管理させる)
          $aliasCreatedNew = "$(step0.aliasCreatedNew)"
          if (-not $aliasCreatedNew) { $aliasCreatedNew = "false" }

          if ($aliasPreExisting -eq "true") {
            $override = "false"
          } else {
            # 新規作成だが create_subscriptionFlag が true の場合のみ true
            $override = if ("$(createSubscriptionFlag)" -eq "true" -and $aliasCreatedNew -eq "true") { "true" } else { "false" }
          }

          Write-Host "Resolved Spoke Subscription ID: $final (aliasPreExisting=$aliasPreExisting aliasCreatedNew=$aliasCreatedNew overrideCreateSubscription=$override)"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"
          Write-Host "##vso[task.setvariable variable=overrideCreateSubscription]$override"

    # 共通: Terraform Helper (再利用)
    - powershell: |
        function Invoke-TerraformStep {
          param(
            [string]$Dir,
            [string[]]$Targets
          )
          Push-Location $Dir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            $useTarget = ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0)
            if ($useTarget) {
              $args = @("apply","-no-color","-auto-approve")
              foreach($t in $Targets){ $args += "-target=$t" }
              Write-Host "Targeted apply: $($Targets -join ', ')"
              terraform @args
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback full"
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "Fallback full apply failed" }
              }
            } else {
              Write-Host "Full apply"
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
            }
          } finally {
            Pop-Location
          }
        }
        Write-Host "Helper function loaded."
      displayName: Load helper function

    # Step1 RG
    - task: AzureCLI@2
      displayName: Step1 - Resource Group
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $subId = "$(finalSpokeSubscriptionId)"
          az account set --subscription $subId
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_resource_group.rg")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)

    # Step2 VNet
    - task: AzureCLI@2
      displayName: Step2 - VNet
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network.vnet")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)

    # Step3 Subnet + NSG
    - task: AzureCLI@2
      displayName: Step3 - Subnet + NSG
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @(
            "azurerm_network_security_group.subnet_nsg",
            "azurerm_subnet.subnet",
            "azurerm_subnet_network_security_group_association.subnet_assoc"
          )
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)

    # Step4a Hub -> Spoke Peering (ハブ側 vNet で作成)
    - task: AzureCLI@2
      displayName: Step4a - Peering Hub->Spoke
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $hubSub = "$(hubSubscriptionId)"
          if (-not $hubSub) { throw "hub_subscription_id not parsed." }
          az account set --subscription $hubSub
          Write-Host "CLI context (Hub): $hubSub"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network_peering.hub_to_spoke")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)

    # Step4b Spoke -> Hub Peering (スポーク側)
    - task: AzureCLI@2
      displayName: Step4b - Peering Spoke->Hub
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Write-Host "CLI context (Spoke): $(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network_peering.spoke_to_hub")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)

    # Verify Peering
    - task: AzureCLI@2
      displayName: Verify Peering (spoke-to-hub)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform init -no-color | Out-Null
            terraform show -json | Out-File tfstate.json -Encoding UTF8
          } finally { Pop-Location }
          $json = Get-Content "$tfDir\tfstate.json" -Raw | ConvertFrom-Json
          $vnetRes = $json.values.root_module.resources |
            Where-Object { $_.type -eq "azurerm_virtual_network" } |
            Select-Object -First 1
          if (-not $vnetRes) { throw "No VNet resource found in state." }
          $spokeVnet = $vnetRes.values.name
          $spokeRg   = $vnetRes.values.resource_group_name
          $state = az network vnet peering show `
            --resource-group $spokeRg `
            --vnet-name $spokeVnet `
            --name "spoke-to-hub" `
            --query peeringState -o tsv 2>$null
          if (-not $state) { throw "Peering 'spoke-to-hub' not found (RG=$spokeRg VNet=$spokeVnet)" }
          Write-Host "Peering 'spoke-to-hub' state: $state"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)