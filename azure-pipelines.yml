# subscription-api / azure-pipelines.yml
# 改訂ポイント:
#  - Step0: alias(Subscription Alias) を targeted apply で作成
#  - 正規化: state 未作成でも落ちないようガードして override.auto.tfvars を生成
#  - サブスクリプション可視化チェック(ARM/az)を挿入して待機 → 以降の az/TF が確実に使える
#  - targeted apply の書式は "-target <addr>"

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true   # 安定運用では false 推奨

stages:
- stage: provision_all
  displayName: Provision (Subscription -> RG -> VNet -> Subnet -> Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      - pwsh: |
          Write-Host "Agent Name  : $env:AGENT_NAME"
          Write-Host "Agent OS    : $env:AGENT_OS"
          Write-Host "Agent Ver   : $env:AGENT_VERSION"
        displayName: Show Agent Info

      - pwsh: |
          $tfDir = "$(Build.SourcesDirectory)\terraform"
          Write-Host "Terraform Root: $tfDir"
          $example = Join-Path $tfDir "terraform.tfvars.example"
          $target  = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $target) -and (Test-Path $example)) {
            Copy-Item $example $target
            Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
          }
          Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
        displayName: Prepare tfvars (optional copy)
        continueOnError: true

      - task: PowerShell@2
        name: prep
        displayName: Parse tfvars / set initial variables
        inputs:
          targetType: inline
          script: |
            $ErrorActionPreference='Stop'
            $tfDir  = "$(tfDir)"
            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $createRaw = Get-TfVar $tfvars "create_subscription"
            $create = if ($createRaw -match '^(?i:true|1)$') { 'true' } else { 'false' }
            $aliasName = Get-TfVar $tfvars "subscription_alias_name"
            $spokeId   = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSub    = Get-TfVar $tfvars "hub_subscription_id"

            Write-Host "Parsed: create_subscription=$create alias=$aliasName spoke_subscription_id=$spokeId hub_subscription_id=$hubSub"
            Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$create"
            Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
            Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSub"

      # Step0: alias 作成 (必要時)
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Ensure Subscription (alias create or lookup)
        condition: and(succeeded(), eq(variables['createSubscriptionFlag'], 'true'), eq(variables['spokeSubIdFromTfvars'], ''))
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $alias = "$(aliasName)"
            if (-not $alias) { throw "subscription_alias_name missing." }
            $tfDir = "$(tfDir)"

            function GetSubId([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try {
                  $v = & $cmd
                  if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
                } catch {}
              }
              return ""
            }

            $existing = GetSubId $alias
            if ($existing) {
              Write-Host "Alias already exists (reuse). alias=$alias subId=$existing"
              Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
              Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]true"
              Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]false"
              exit 0
            }

            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              terraform apply -no-color -auto-approve -target azapi_resource.subscription[0]
              if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias) failed" }
            } finally { Pop-Location }

            # Poll: 新規作成された subId が解決可能になるまで待つ
            $subId=""
            for($i=0;$i -lt 36 -and -not $subId;$i++){
              $subId = GetSubId $alias
              if($subId){break}
              Start-Sleep -Seconds 10
            }
            if(-not $subId){ throw "SubscriptionId not resolved within 360s" }

            Write-Host "Created subscriptionId=$subId"
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
            Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]false"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]true"

      # 正規化 (state が無くても落ちない)
      - task: PowerShell@2
        name: normalize
        displayName: Post-Step0 Normalize alias state
        condition: and(succeeded(), eq(variables['createSubscriptionFlag'],'true'))
        inputs:
          targetType: inline
          script: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(tfDir)"
            $newId = "$(step0.spokeSubscriptionId)"
            if (-not $newId) {
              Write-Host "No new subscription ID (Step0 skipped or reused existing). Normalization skip."
              exit 0
            }
            Write-Host "Normalization start. subscriptionId=$newId"
            Push-Location $tfDir
            try {
              terraform init -no-color | Out-Null

              $hasState = $false
              try {
                terraform state list 1>$null 2>$null
                if ($LASTEXITCODE -eq 0) { $hasState = $true }
              } catch {}

              if ($hasState) {
                terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "Removing alias resource from state to prevent destroy."
                  terraform state rm azapi_resource.subscription[0] | Out-Null
                } else {
                  Write-Host "Alias resource not in state; nothing to remove."
                }
              } else {
                Write-Host "Terraform state not found yet; skip state edits."
              }

              $overrideFile = @()
              $overrideFile += 'create_subscription = false'
              $overrideFile += 'spoke_subscription_id = "' + $newId + '"'
              $overridePath = Join-Path $tfDir "override.auto.tfvars"
              $overrideFile | Set-Content -Encoding UTF8 $overridePath
              Write-Host "override.auto.tfvars written."
            } finally { Pop-Location }
            Write-Host "##vso[task.setvariable variable=overrideCreateSubscription]false"

      - task: PowerShell@2
        name: decideSub
        displayName: Decide / Normalize Subscription Flags
        inputs:
          targetType: inline
          script: |
            $ErrorActionPreference='Stop'
            $fromStep0   = "$(step0.spokeSubscriptionId)"
            $fromTfvars  = "$(spokeSubIdFromTfvars)"
            $final = if ($fromStep0) { $fromStep0 } else { $fromTfvars }
            if (-not $final) {
              if ("$(createSubscriptionFlag)" -eq "true") { throw "Subscription ID not resolved (Step0 failure?)" }
              throw "spoke_subscription_id required when create_subscription=false"
            }
            $override = "$(overrideCreateSubscription)"
            if (-not $override) { $override = "false" }
            Write-Host "Resolved Spoke Subscription ID: $final"
            Write-Host "overrideCreateSubscription(final)=$override"
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"
            Write-Host "##vso[task.setvariable variable=overrideCreateSubscription]$override"

      - pwsh: |
          Write-Host "DEBUG finalSpokeSubscriptionId=$(finalSpokeSubscriptionId)"
          Write-Host "DEBUG overrideCreateSubscription=$(overrideCreateSubscription)"
          if (-not "$(finalSpokeSubscriptionId)") { throw "finalSpokeSubscriptionId empty" }
        displayName: Debug print normalized vars

      # サブスクリプション可視化チェック＋リトライ待ち
      - task: AzureCLI@2
        name: waitSub
        displayName: Wait Subscription Visibility (ARM & az account list)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference = 'Stop'
            $target = "$(finalSpokeSubscriptionId)"
            if (-not $target) { throw "finalSpokeSubscriptionId empty" }
            Write-Host "Target subscription: $target"

            # 1) ARM 側で存在確認（最大 ~4分）
            $armOk = $false
            for ($i=1; $i -le 24; $i++) {
              try {
                az rest --method get --url "https://management.azure.com/subscriptions/$target?api-version=2020-01-01" | Out-Null
                $armOk = $true; break
              } catch { Start-Sleep -Seconds 10 }
            }
            if (-not $armOk) { throw "ARM endpoint not seeing subscription: $target" }

            # 2) CLI 可視化 (--refresh)（最大 ~10分）
            $seen = $false
            for ($i=1; $i -le 40; $i++) {
              $hit = az account list --refresh --query "[?id=='$target']" -o tsv
              if ($hit) { $seen = $true; break }
              Start-Sleep -Seconds 15
            }
            if (-not $seen) { throw "Subscription not visible to Azure CLI after retries: $target" }

            az account set --subscription $target
            az account show --query "{id:id,name:name,isDefault:isDefault}" -o tsv

      # Step1 RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir = "$(tfDir)"
            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback full apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
              }
            } finally { Pop-Location }

      # Step2 VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir = "$(tfDir)"
            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback full apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
              }
            } finally { Pop-Location }

      # Step3 Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir = "$(tfDir)"
            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_network_security_group.subnet_nsg -target azurerm_subnet.subnet -target azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback full apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
              }
            } finally { Pop-Location }

      # Step4a Hub->Spoke
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hub_subscription_id not parsed." }
            az account set --subscription $hubSub
            Write-Host "Hub subscription: $hubSub"
            $tfDir = "$(tfDir)"
            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply (peering hub->spoke) failed" }
            } finally { Pop-Location }

      # Step4b Spoke->Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Write-Host "Spoke subscription: $(finalSpokeSubscriptionId)"
            $tfDir = "$(tfDir)"
            Push-Location $tfDir
            try {
              terraform init -no-color
              if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply (peering spoke->hub) failed" }
            } finally { Pop-Location }

      # Verify Peering
      - task: AzureCLI@2
        displayName: Verify Peering (spoke-to-hub)
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir = "$(tfDir)"
            terraform -chdir="$tfDir" init -no-color | Out-Null
            $json = terraform -chdir="$tfDir" show -json
            if (-not $json) { throw "terraform show -json failed" }
            $obj = $json | ConvertFrom-Json
            $vnet = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
            if (-not $vnet) { throw "VNet resource not in state." }
            $rgName = $vnet.values.resource_group_name
            $vnName = $vnet.values.name
            $state = az network vnet peering show --resource-group $rgName --vnet-name $vnName --name "spoke-to-hub" --query peeringState -o tsv 2>$null
            if (-not $state) { throw "Peering 'spoke-to-hub' not found (RG=$rgName VNet=$vnName)" }
            Write-Host "Peering 'spoke-to-hub' state: $state"

      # Optional: final plan
      - task: AzureCLI@2
        displayName: Convergence Plan (optional)
        continueOnError: true
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: $(overrideCreateSubscription)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            az account set --subscription "$(finalSpokeSubscriptionId)"
            terraform -chdir="$(tfDir)" init -no-color | Out-Null
            terraform -chdir="$(tfDir)" plan -no-color
