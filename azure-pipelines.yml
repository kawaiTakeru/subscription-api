parameters:
- name: environment_id
  type: string
  default: dev
  values:
  - cmn
  - dev
  - stg
  - prd
- name: project_name
  type: string
  default: ""
- name: email
  type: string
  default: ""     # 任意
- name: vnet_type
  type: string
  default: private
  values:
  - private
  - public

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true
  - name: azureServiceConnection
    value: snp-pipeline-api-wif

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Simplified)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        env:
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Write-Host "[Step0] Terraform dir: $tfDir"

            $projectParam = "${{ parameters.project_name }}"
            Write-Host "[Step0] project_name: '$projectParam'"
            Write-Host "[Step0] environment_id: $env:TF_VAR_environment_id"
            Write-Host "[Step0] vnet_type: $env:TF_VAR_vnet_type"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try { $v = & $cmd; if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() } } catch {}
              }
              return ""
            }
            function Wait-For-ARM([string]$SubId, [int]$Seconds = 240) {
              $tries = [Math]::Ceiling($Seconds / 10)
              for ($i=1; $i -le $tries; $i++) {
                try { az rest --method get --url "https://management.azure.com/subscriptions/$SubId?api-version=2020-01-01" -o none; return }
                catch { Write-Host "[Step0] waiting ARM... ($i/$tries)"; Start-Sleep -Seconds 10 }
              }
              throw "Subscription not visible in ARM after $Seconds seconds: $SubId"
            }
            function Wait-For-AzCliVisibility([string]$SubId, [int]$MaxMinutes = 10) {
              $max = [Math]::Ceiling(($MaxMinutes*60) / 15)
              for ($i=1; $i -le $max; $i++) {
                $hit = az account list --refresh --query "[?id=='$SubId'].id" -o tsv
                $tokenOk = $false
                try { az account get-access-token --subscription $SubId -o none 2>$null; if ($LASTEXITCODE -eq 0) { $tokenOk = $true } } catch {}
                if ($hit -and $tokenOk) { return }
                Write-Host "[Step0] waiting az cli... ($i/$max)"
                Start-Sleep -Seconds 15
              }
              throw "Azure CLI did not recognize subscription within $MaxMinutes minutes: $SubId"
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            $aliasName   = Get-TfVar $tfvars "subscription_alias_name"
            $dispName    = Get-TfVar $tfvars "subscription_display_name"
            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

            if (-not $aliasName -or -not $dispName) {
              $purpose = Get-TfVar $tfvars "purpose_name"
              $envId   = Get-TfVar $tfvars "environment_id"
              $rCode   = Get-TfVar $tfvars "region_code"
              $seq     = Get-TfVar $tfvars "sequence"
              $base    = "$($projectParam.ToLower())-$($purpose.ToLower())-$envId-$rCode-$seq"
              if (-not $aliasName) { $aliasName = "sub-$base" }
              if (-not $dispName)  { $dispName  = "sub-$base" }
            }

            $finalSubId = ""
            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false には spoke_subscription_id が必要" }
              $finalSubId = $spokeIdInTf
            } else {
              if ($spokeIdInTf) {
                $finalSubId = $spokeIdInTf
              } else {
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  $finalSubId = $reuseId
                } else {
                  Push-Location $tfDir
                  try {
                    terraform init -no-color -input=false
                    $vars = @("-var","subscription_alias_name=$aliasName","-var","subscription_display_name=$dispName")
                    terraform apply -no-color -input=false -auto-approve -target azapi_resource.subscription[0] @vars
                    if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias) failed" }
                  } finally { Pop-Location }
                  $finalSubId = Get-SubscriptionIdFromAlias $aliasName
                  if (-not $finalSubId) { throw "Could not resolve subscription id after creation." }
                  Wait-For-ARM $finalSubId 240
                  Wait-For-AzCliVisibility $finalSubId 10
                }
              }
            }

            # 次ステップ用変数
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "[Step0] finalSpokeSubscriptionId=$finalSubId hubSubscriptionId=$hubSubId"

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $subId = $env:ARM_SUBSCRIPTION_ID
            if (-not $subId) { throw "finalSpokeSubscriptionId is empty. Check Step0." }
            $ok = $false
            for ($i=1; $i -le 12; $i++) {
              try { az account set --subscription $subId; az account get-access-token --subscription $subId -o none; if ($LASTEXITCODE -eq 0) { $ok = $true; break } } catch {}
              Start-Sleep -Seconds 10
            }
            if (-not $ok) { throw "Azure CLI is not ready for subscription: $subId" }
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -input=false -auto-approve }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -input=false -auto-approve }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve `
                  -target azurerm_network_security_group.subnet_nsg `
                  -target azurerm_subnet.subnet `
                  -target azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -input=false -auto-approve }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke（private のときのみ）
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        condition: and(succeeded(), eq('${{ parameters.vnet_type }}','private'))
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          hubSubscriptionId: $(hubSubscriptionId)
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = $env:hubSubscriptionId
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke->Hub（private のときのみ）
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        condition: and(succeeded(), eq('${{ parameters.vnet_type }}','private'))
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription $env:ARM_SUBSCRIPTION_ID
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }