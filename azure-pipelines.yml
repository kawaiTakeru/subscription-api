trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true   # 安定後は false 推奨（フル apply）

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Compat with named or computed resources)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Write-Host "Terraform dir: $tfDir"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            $aliasName   = Get-TfVar $tfvars "subscription_alias_name"
            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try { $v = & $cmd; if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() } } catch {}
              }
              return ""
            }

            $finalSubId = ""
            $aliasCreatedNew = "false"

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須" }
              $finalSubId = $spokeIdInTf
            } else {
              if ($spokeIdInTf) {
                Write-Warning "create_subscription=true ですが spoke_subscription_id が指定されています。既存IDを優先します。"
                $finalSubId = $spokeIdInTf
              } else {
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  $finalSubId = $reuseId
                } else {
                  if (-not $aliasName) { throw "subscription_alias_name is empty; cannot create." }
                  Push-Location $tfDir
                  try {
                    terraform init -no-color
                    if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
                    terraform apply -no-color -auto-approve -target azapi_resource.subscription[0]
                    if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }
                    $subOut = terraform output -raw subscription_id 2>$null
                    if ($LASTEXITCODE -ne 0 -or -not $subOut) { $subOut = Get-SubscriptionIdFromAlias $aliasName }
                    if (-not $subOut) { throw "Could not resolve subscription id after creation." }
                    $finalSubId = $subOut.Trim()
                    $aliasCreatedNew = "true"

                    terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                    if ($LASTEXITCODE -eq 0) {
                      terraform state rm azapi_resource.subscription[0] | Out-Null
                    }

                    @(
                      'create_subscription = false'
                      'spoke_subscription_id = "' + $finalSubId + '"'
                    ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")
                  } finally { Pop-Location }

                  # 可視化待ち
                  $ok = $false
                  for($i=1;$i -le 24;$i++){ try { az rest --method get --url "https://management.azure.com/subscriptions/$finalSubId?api-version=2020-01-01" | Out-Null; $ok=$true; break } catch { Start-Sleep -Seconds 10 } }
                  if (-not $ok) { throw "Subscription not visible in ARM after retries: $finalSubId" }
                  $seen = $false
                  for($i=1;$i -le 40;$i++){ $hit = az account list --refresh --query "[?id=='$finalSubId']" -o tsv; if ($hit) { $seen=$true; break }; Start-Sleep -Seconds 15 }
                  if (-not $seen) { throw "Subscription not listed by 'az account list' after waiting: $finalSubId" }
                }
              }
            }

            if (-not $finalSubId) { throw "final subscription id could not be resolved." }
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew]$aliasCreatedNew"
            Write-Host "Resolved finalSpokeSubscriptionId=$finalSubId (aliasCreatedNew=$aliasCreatedNew)"

      # Step1: RG（rg_name が無い場合は命名規約で補完 + 既存なら import）
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            $tfvars = Join-Path $tfDir "terraform.tfvars"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[^0-9A-Za-z]+", "-")
              return $t.ToLower().Trim('-')
            }

            az account set --subscription "$(finalSpokeSubscriptionId)"

            # 1) tfvars に rg_name があればそれを使う。2) 無ければ命名規約から組み立て。
            $rgName = Get-TfVar $tfvars "rg_name"
            if (-not $rgName) {
              $project    = To-Slug (Get-TfVar $tfvars 'project_name')
              $purpose    = To-Slug (Get-TfVar $tfvars 'purpose_name')
              $envId      = (Get-TfVar $tfvars 'environment_id')
              $regionCode = (Get-TfVar $tfvars 'region_code')
              $seq        = (Get-TfVar $tfvars 'sequence')
              if (-not $project -or -not $purpose -or -not $envId -or -not $regionCode -or -not $seq) {
                throw "rg_name not found in tfvars and naming components are incomplete (need project_name, purpose_name, environment_id, region_code, sequence)."
              }
              $base  = ($project,$purpose,$envId,$regionCode,$seq) -join '-'
              $rgName = "rg-$base"
              Write-Host "rg_name not provided. Computed: $rgName"
            }

            $rgId = "/subscriptions/$(finalSpokeSubscriptionId)/resourceGroups/$rgName"

            Push-Location $tfDir
            try {
              terraform init -no-color

              # 既存 RG が Azure にあるのに state に無い場合だけ import
              $exists  = (az group exists -n $rgName)
              $inState = terraform state list 2>$null | Select-String -SimpleMatch "azurerm_resource_group.rg"
              if ($exists -eq 'true' -and -not $inState) {
                Write-Host "RG exists in Azure but not in state. Importing: $rgId"
                terraform import -no-color azurerm_resource_group.rg $rgId
                if ($LASTEXITCODE -ne 0) { throw "terraform import (RG) failed" }
              }

              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -auto-approve }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet（vnet_name が無い場合は命名規約で補完）
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            $tfvars = Join-Path $tfDir "terraform.tfvars"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[^0-9A-Za-z]+", "-")
              return $t.ToLower().Trim('-')
            }

            az account set --subscription "$(finalSpokeSubscriptionId)"

            $rgName = Get-TfVar $tfvars "rg_name"
            $vnetName = Get-TfVar $tfvars "vnet_name"
            if (-not $rgName -or -not $vnetName) {
              $project    = To-Slug (Get-TfVar $tfvars 'project_name')
              $purpose    = To-Slug (Get-TfVar $tfvars 'purpose_name')
              $envId      = (Get-TfVar $tfvars 'environment_id')
              $regionCode = (Get-TfVar $tfvars 'region_code')
              $seq        = (Get-TfVar $tfvars 'sequence')
              if (-not $rgName)   { if (-not $project -or -not $purpose -or -not $envId -or -not $regionCode -or -not $seq) { throw "rg_name/vnet_name missing and naming components incomplete." } $rgName  = "rg-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              if (-not $vnetName) { if (-not $project -or -not $purpose -or -not $envId -or -not $regionCode -or -not $seq) { throw "rg_name/vnet_name missing and naming components incomplete." } $vnetName = "vnet-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              Write-Host "Computed names: rg=$rgName vnet=$vnetName"
            }

            Push-Location $tfDir
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -auto-approve }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG（名前が無い場合は命名規約で補完）
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            $tfvars = Join-Path $tfDir "terraform.tfvars"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim()
              $t = [regex]::Replace($t, "[^0-9A-Za-z]+", "-")
              return $t.ToLower().Trim('-')
            }

            az account set --subscription "$(finalSpokeSubscriptionId)"

            $rgName    = Get-TfVar $tfvars "rg_name"
            $vnetName  = Get-TfVar $tfvars "vnet_name"
            $subnet    = Get-TfVar $tfvars "subnet_name"
            $nsg       = Get-TfVar $tfvars "nsg_name"

            if (-not $rgName -or -not $vnetName -or -not $subnet -or -not $nsg) {
              $project    = To-Slug (Get-TfVar $tfvars 'project_name')
              $purpose    = To-Slug (Get-TfVar $tfvars 'purpose_name')
              $envId      = (Get-TfVar $tfvars 'environment_id')
              $regionCode = (Get-TfVar $tfvars 'region_code')
              $seq        = (Get-TfVar $tfvars 'sequence')
              if (-not $project -or -not $purpose -or -not $envId -or -not $regionCode -or -not $seq) {
                throw "subnet/nsg naming missing and naming components incomplete."
              }
              if (-not $rgName)   { $rgName   = "rg-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              if (-not $vnetName) { $vnetName = "vnet-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              if (-not $subnet)   { $subnet   = "snet-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              if (-not $nsg)      { $nsg      = "nsg-$($project)-$($purpose)-$($envId)-$($regionCode)-$($seq)" }
              Write-Host "Computed names: rg=$rgName vnet=$vnetName subnet=$subnet nsg=$nsg"
            }

            Push-Location $tfDir
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve `
                  -target azurerm_network_security_group.subnet_nsg `
                  -target azurerm_subnet.subnet `
                  -target azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform apply -no-color -auto-approve }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke（Hub 側で実行）
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }
