# subscription-api / azure-pipelines.yml
trigger: none
pr: none

# 将来 Function から渡す入口パラメータ（手動実行時もここで変更可）
parameters:
- name: env
  type: string
  default: dev
- name: location
  type: string
  default: canadacentral

# --- Stage0 (必須) に必要な入力 ---
- name: subscriptionAliasName
  type: string
  default: "cr_subscription_test_99"
- name: subscriptionDisplayName
  type: string
  default: "CR 検証サブスクリプション 99"
- name: billingAccountName
  type: string
  default: ""
- name: billingProfileName
  type: string
  default: ""
- name: invoiceSectionName
  type: string
  default: ""
- name: workload
  type: string
  default: "Production"   # or "DevTest"
- name: planOnly
  type: boolean
  default: false          # trueにするとplanだけ

# =========================================================
# Stage0: Subscription (実行される)
# =========================================================
stages:
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 0) Terraform がなければインストール（ある場合はスキップ）
    - task: Bash@3
      displayName: 'Install Terraform if missing'
      inputs:
        targetType: 'inline'
        script: |
          set -e
          if ! command -v terraform >/dev/null 2>&1; then
            echo "Terraform not found. Installing..."
            sudo apt-get update -y
            sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update -y && sudo apt-get install -y terraform
          fi
          terraform -version

    # 1) Azure接続（サービス接続で自動ログイン）
    - task: AzureCLI@2
      name: tf
      displayName: 'Terraform init/plan/apply (Stage0)'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)/terraform/stage0-subscription
        inlineScript: |
          set -e

          echo "== terraform init =="
          terraform init

          echo "== terraform plan =="
          terraform plan \
            -var "subscription_alias_name=${{ parameters.subscriptionAliasName }}" \
            -var "subscription_display_name=${{ parameters.subscriptionDisplayName }}" \
            -var "billing_account_name=${{ parameters.billingAccountName }}" \
            -var "billing_profile_name=${{ parameters.billingProfileName }}" \
            -var "invoice_section_name=${{ parameters.invoiceSectionName }}" \
            -var "subscription_workload=${{ parameters.workload }}" \
            -out plan.out

          if [ "${{ parameters.planOnly }}" = "false" ]; then
            echo "== terraform apply =="
            terraform apply -auto-approve plan.out
          else
            echo "Skip apply (planOnly=true)"
          fi

          # 出力を次ステージへ渡す
          SUB_ID=$(terraform output -raw subscription_id 2>/dev/null || true)
          echo "subscriptionId=${SUB_ID}"
          echo "##vso[task.setvariable variable=subscriptionId;isOutput=true]${SUB_ID}"

# =========================================================
# Stage1〜4: テンプレ（今はプレースホルダー）
# =========================================================

# Stage1: Resource Group
- stage: stage1_rg
  displayName: "Stage1 - Resource Group"
  dependsOn: stage0_subscription
  variables:
    subscriptionId: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
  jobs:
  - job: placeholder_rg
    steps:
    - bash: |
        echo "[RG] placeholder"
        echo "SubscriptionId from Stage0: $(subscriptionId)"

# Stage2: VNet
- stage: stage2_vnet
  displayName: "Stage2 - VNet"
  dependsOn: stage1_rg
  jobs:
  - job: placeholder_vnet
    steps:
    - bash: echo "[VNET] placeholder"

# Stage3: Subnet
- stage: stage3_subnet
  displayName: "Stage3 - Subnet"
  dependsOn: stage2_vnet
  jobs:
  - job: placeholder_subnet
    steps:
    - bash: echo "[SUBNET] placeholder"

# Stage4a: Peering Spoke->Hub
- stage: stage4a_peering_s2h
  displayName: "Stage4a - Peering Spoke->Hub"
  dependsOn: stage3_subnet
  jobs:
  - job: placeholder_peering_s2h
    steps:
    - bash: echo "[PEERING S->H] placeholder"

# Stage4b: Peering Hub->Spoke
- stage: stage4b_peering_h2s
  displayName: "Stage4b - Peering Hub->Spoke"
  dependsOn: stage4a_peering_s2h
  jobs:
  - job: placeholder_peering_h2s
    steps:
    - bash: echo "[PEERING H->S] placeholder"
