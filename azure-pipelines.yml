trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: USE_TARGETED_APPLY
    value: true   # 安定稼働後は false 推奨

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Simplified)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Write-Host "Terraform dir: $tfDir"

            # --- tfvars パース関数 ---
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $s = $s.ToLowerInvariant()
              return ($s -replace '[^a-z0-9]', '')
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            # 命名ドライバ（.tfvars 冒頭の2変数）
            $projectName = Get-TfVar $tfvars "project_name"
            $purposeName = Get-TfVar $tfvars "purpose_name"
            $envId       = (Get-TfVar $tfvars "environment_id"); if (-not $envId) { $envId = "prd" }
            $regionCode  = (Get-TfVar $tfvars "region_code");    if (-not $regionCode) { $regionCode = "jpe" }
            $seq         = (Get-TfVar $tfvars "sequence");       if (-not $seq) { $seq = "001" }

            $projSlug    = To-Slug $projectName
            $purposeSlug = To-Slug $purposeName
            if (-not $purposeSlug) {
              if ($purposeName -eq "検証") { $purposeSlug = "kensho" }
            }
            if (-not $projSlug -or -not $purposeSlug) {
              throw "project_name/purpose_name cannot be converted to ASCII slug. project='$projectName' purpose='$purposeName'"
            }
            $base      = "$projSlug-$purposeSlug-$envId-$regionCode-$seq"
            $aliasName = "sub-$base"

            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

            Write-Host "Parsed: create_subscription=$createFlag computed_alias=$aliasName existingSpokeId='$spokeIdInTf' hub_subscription_id=$hubSubId"

            # 既存 / 新規 判定
            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try {
                  $v = & $cmd
                  if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
                } catch {}
              }
              return ""
            }

            $finalSubId = ""
            $aliasCreatedNew = "false"

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須" }
              $finalSubId = $spokeIdInTf
              Write-Host "Using provided existing subscription: $finalSubId"
            } else {
              if ($spokeIdInTf) {
                Write-Warning "create_subscription=true ですが spoke_subscription_id が指定されています。既存IDを優先します。"
                $finalSubId = $spokeIdInTf
              } else {
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  Write-Host "Alias already exists. Reuse subscriptionId=$reuseId"
                  $finalSubId = $reuseId
                } else {
                  Write-Host "Creating new subscription via Terraform (targeted alias)."
                  Push-Location $tfDir
                  try {
                    terraform init -no-color
                    if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }

                    terraform apply -no-color -auto-approve -target azapi_resource.subscription[0]
                    if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }

                    $subOut = terraform output -raw subscription_id 2>$null
                    if ($LASTEXITCODE -ne 0 -or -not $subOut) {
                      $subOut = Get-SubscriptionIdFromAlias $aliasName
                    }
                    if (-not $subOut) { throw "Could not resolve subscription id after creation." }
                    $finalSubId = $subOut.Trim()
                    $aliasCreatedNew = "true"

                    # state から alias を除去 & override.auto.tfvars 生成
                    terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                    if ($LASTEXITCODE -eq 0) {
                      Write-Host "Removing alias resource from state to prevent destroy in later full applies."
                      terraform state rm azapi_resource.subscription[0] | Out-Null
                    }
                    $overrideContent = @(
                      'create_subscription = false'
                      'spoke_subscription_id = "' + $finalSubId + '"'
                    )
                    $overridePath = Join-Path $tfDir "override.auto.tfvars"
                    $overrideContent | Set-Content -Encoding UTF8 $overridePath
                    Write-Host "override.auto.tfvars written with final subscription id."
                  } finally {
                    Pop-Location
                  }

                  # 可視化待ち (ARM) 短縮
                  Write-Host "Waiting for subscription visibility (ARM)..."
                  $armOk = $false
                  for($i=1;$i -le 24;$i++){  # 最大 ~4 分
                    try {
                      az rest --method get --url "https://management.azure.com/subscriptions/$finalSubId?api-version=2020-01-01" | Out-Null
                      $armOk = $true
                      break
                    } catch {
                      Start-Sleep -Seconds 10
                    }
                  }
                  if (-not $armOk) { throw "Subscription not visible in ARM after retries: $finalSubId" }

                  # az account list 反映待ち（短縮＆失敗しても続行）
                  Write-Host "Waiting for subscription visibility (az account list)..."
                  $seen = $false
                  for($i=1;$i -le 10;$i++){  # 最大 ~2.5 分（従来 10 分）
                    $hit = az account list --refresh --query "[?id=='$finalSubId']" -o tsv
                    if ($hit) { $seen = $true; break }
                    Start-Sleep -Seconds 15
                  }
                  if (-not $seen) {
                    Write-Warning "Subscription not listed by 'az account list' after waiting: $finalSubId. Continuing anyway."
                  } else {
                    Write-Host "Subscription is now visible in az account list. ID=$finalSubId"
                  }
                }
              }
            }

            if (-not $finalSubId) { throw "final subscription id could not be resolved." }

            # pipeline 変数設定
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew]$aliasCreatedNew"

            Write-Host "Resolved finalSpokeSubscriptionId=$finalSubId (aliasCreatedNew=$aliasCreatedNew)"

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve `
                  -target azurerm_network_security_group.subnet_nsg `
                  -target azurerm_subnet.subnet `
                  -target azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke (Hub側サブスクリプションで実行)
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }
