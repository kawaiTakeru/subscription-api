trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: USE_TARGETED_APPLY
    value: true   # 安定稼働後は false 推奨

stages:
- stage: provision_all
  displayName: Provision Subscription + Network
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: Subscription (create or reuse) + export naming vars
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function To-Slug([string]$s) {
              if (-not $s) { return "" }
              $s = $s.ToLowerInvariant()
              return ($s -replace '[^a-z0-9]', '')
            }
            function Is-Guid([string]$s) {
              return $s -match '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
            }
            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az rest --method get --url "https://management.azure.com/providers/Microsoft.Subscription/aliases/$Alias?api-version=2021-10-01" --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try {
                  $v = & $cmd
                  if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
                } catch {}
              }
              return ""
            }

            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            Write-Host "Terraform dir: $tfDir"
            Write-Host "Using var-file: $varFile"
            if (-not (Test-Path $varFile)) { throw "terraform.tfvars missing." }

            # Read naming inputs and export as pipeline variables
            $pj  = Get-TfVar $varFile "project_name"
            $pu  = Get-TfVar $varFile "purpose_name"
            $env = Get-TfVar $varFile "environment_id"; if (-not $env) { $env = "prd" }
            $rc  = Get-TfVar $varFile "region_code";    if (-not $rc)  { $rc  = "jpe" }
            $seq = Get-TfVar $varFile "sequence";       if (-not $seq) { $seq = "001" }

            Write-Host "##vso[task.setvariable variable=tfProjectName]$pj"
            Write-Host "##vso[task.setvariable variable=tfPurposeName]$pu"
            Write-Host "##vso[task.setvariable variable=tfEnvironmentId]$env"
            Write-Host "##vso[task.setvariable variable=tfRegionCode]$rc"
            Write-Host "##vso[task.setvariable variable=tfSequence]$seq"

            # read create/reuse
            $createRaw   = Get-TfVar $varFile "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $varFile "spoke_subscription_id"

            # derive alias if empty: sub-<pj>-<purpose>-<env>-<rc>-<seq>
            $aliasFromTf = Get-TfVar $varFile "subscription_alias_name"
            if (-not $aliasFromTf) {
              $projSlug    = To-Slug $pj
              $purposeSlug = To-Slug $pu
              if (-not $purposeSlug -and $pu -eq "検証") { $purposeSlug = "kensho" }
              $parts = @($projSlug, $purposeSlug, $env, $rc, $seq) | Where-Object { $_ -and $_.Trim() -ne "" }
              $aliasFromTf = if ($parts.Count -gt 0) { "sub-" + ($parts -join "-") } else { "" }
            }
            Write-Host "Alias (computed if empty): $aliasFromTf"

            $finalSubId = ""

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須です。" }
              if (-not (Is-Guid $spokeIdInTf)) { throw "spoke_subscription_id is not a valid GUID: $spokeIdInTf" }
              $finalSubId = $spokeIdInTf.Trim()
              Write-Host "Reuse existing subscription: $finalSubId"
            } else {
              # Create new subscription alias (targeted apply)
              Push-Location $tfDir
              try {
                terraform init -no-color
                if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }

                # Pin alias if we computed it
                if ($aliasFromTf) {
                  @(
                    'subscription_alias_name   = "' + $aliasFromTf + '"'
                    'subscription_display_name = "' + $aliasFromTf + '"'
                  ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")
                }

                terraform apply -no-color -auto-approve -var-file="$varFile" -target azapi_resource.subscription[0]
                if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }

                # resolve subscription id (output -> fallback alias query)
                $jsonOut = terraform output -no-color -json 2>$null
                if ($LASTEXITCODE -eq 0 -and $jsonOut) {
                  try {
                    $obj = $jsonOut | ConvertFrom-Json
                    $maybe = $obj.subscription_id.value
                    if ($maybe) { $finalSubId = $maybe.Trim() }
                  } catch {}
                }
                if (-not $finalSubId -and $aliasFromTf) {
                  $maybe2 = Get-SubscriptionIdFromAlias $aliasFromTf
                  if ($maybe2) { $finalSubId = $maybe2.Trim() }
                }
                if (-not $finalSubId) { throw "Could not resolve created subscription id." }

                # Remove alias from state to prevent destroy later
                terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                if ($LASTEXITCODE -eq 0) { terraform state rm azapi_resource.subscription[0] | Out-Null }

                # Switch to reuse mode for subsequent steps
                @(
                  'create_subscription = false'
                  'spoke_subscription_id = "' + $finalSubId + '"'
                ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")

              } finally { Pop-Location }

              # Wait for visibility (ARM + az account list)
              Write-Host "Waiting for subscription visibility (ARM/az account list)..."
              $armOk = $false
              for($i=1;$i -le 24;$i++){
                try {
                  az rest --method get --url "https://management.azure.com/subscriptions/$finalSubId?api-version=2020-01-01" | Out-Null
                  $armOk = $true; break
                } catch { Start-Sleep -Seconds 10 }
              }
              for($i=1;$i -le 40 -and $armOk;$i++){
                $hit = az account list --refresh --query "[?id=='$finalSubId']" -o tsv
                if ($hit) { break }
                Start-Sleep -Seconds 15
              }

              Write-Host "Created subscription id: $finalSubId"
            }

            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "Resolved finalSpokeSubscriptionId=$finalSubId"

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: $(tfProjectName)
          TF_VAR_purpose_name: $(tfPurposeName)
          TF_VAR_environment_id: $(tfEnvironmentId)
          TF_VAR_region_code: $(tfRegionCode)
          TF_VAR_sequence: $(tfSequence)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile" -target azurerm_resource_group.rg
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback full apply"
                terraform apply -no-color -auto-approve -var-file="$varFile"
              }
              # Debug: show naming outputs
              terraform output -no-color base_naming
              terraform output -no-color rg_expected_name
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: $(tfProjectName)
          TF_VAR_purpose_name: $(tfPurposeName)
          TF_VAR_environment_id: $(tfEnvironmentId)
          TF_VAR_region_code: $(tfRegionCode)
          TF_VAR_sequence: $(tfSequence)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="$varFile" -target azurerm_virtual_network.vnet
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback full apply"
                terraform apply -no-color -auto-approve -var-file="$varFile"
              }
              terraform output -no-color vnet_expected_name
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: $(tfProjectName)
          TF_VAR_purpose_name: $(tfPurposeName)
          TF_VAR_environment_id: $(tfEnvironmentId)
          TF_VAR_region_code: $(tfRegionCode)
          TF_VAR_sequence: $(tfSequence)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir   = "$(Build.SourcesDirectory)/terraform"
            $varFile = Join-Path $tfDir "terraform.tfvars"
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve `
                -var-file="$varFile" `
                -target azurerm_network_security_group.subnet_nsg `
                -target azurerm_subnet.subnet `
                -target azurerm_subnet_network_security_group_association.subnet_assoc
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback full apply"
                terraform apply -no-color -auto-approve -var-file="$varFile"
              }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: $(tfProjectName)
          TF_VAR_purpose_name: $(tfPurposeName)
          TF_VAR_environment_id: $(tfEnvironmentId)
          TF_VAR_region_code: $(tfRegionCode)
          TF_VAR_sequence: $(tfSequence)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="terraform.tfvars"
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: $(tfProjectName)
          TF_VAR_purpose_name: $(tfPurposeName)
          TF_VAR_environment_id: $(tfEnvironmentId)
          TF_VAR_region_code: $(tfRegionCode)
          TF_VAR_sequence: $(tfSequence)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve -var-file="terraform.tfvars"
            } finally { Pop-Location }