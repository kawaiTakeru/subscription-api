# subscription-api / azure-pipelines.yml (Single Stage + Robust Step0 w/o displayName fallback, PowerShell Core)
trigger: none
pr: none

pool:
  vmImage: 'windows-2022'

variables:
  - name: System.Debug
    value: 'true'

stages:
- stage: provision_all
  displayName: "Provision (Subscription→RG→VNet→Subnet→Peering)"
  jobs:
  - job: terraform_job
    displayName: "Terraform Orchestration (single root)"
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
      displayName: "Optional: copy example tfvars if missing"
      continueOnError: true

    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $acct = az account show -o json | ConvertFrom-Json
          if (-not $acct) { throw "az account show failed." }
          Write-Host "== Service Connection Account =="
          Write-Host "tenantId      : $($acct.tenantId)"
          Write-Host "subscription  : $($acct.name)"
          Write-Host "subscriptionId: $($acct.id)"
          Write-Host "clientId      : $($acct.user.name)"
          Write-Host ""
          Write-Host "== Role Assignments (current SP) =="
          try {
            $sp = az ad sp show --id $acct.user.name -o json 2>$null | ConvertFrom-Json
            if ($sp -and $sp.id) {
              Write-Host "spObjectId: $($sp.id)"
              az role assignment list --assignee $sp.id --all -o table
            } else {
              Write-Host "(SP object not resolved)"
            }
          } catch {
            Write-Host "(Role assignment query failed: $($_.Exception.Message))"
          }

    - task: PowerShell@2
      name: prep
      displayName: "Prepare Variables (parse tfvars)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(Build.SourcesDirectory)\terraform"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfDir))  { throw "Terraform directory not found: $tfDir" }
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfvarsValue([string]$Path, [string]$Key) {
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
            if (-not $line) { return "" }
            $val = $line -replace "^\s*$Key\s*=\s*", ""
            if ($val -match "#") { $val = ($val -split "#")[0] }
            $val = $val.Trim().Trim('"')
            return $val
          }

          $createSubscription = (Get-TfvarsValue $tfvars "create_subscription")
          if ($createSubscription -match '^(?i:true|1)$') { $createSubscription = "true" } else { $createSubscription = "false" }
          $spokeSubInVars = Get-TfvarsValue $tfvars "spoke_subscription_id"
          $aliasName      = Get-TfvarsValue $tfvars "subscription_alias_name"
          $displayName    = Get-TfvarsValue $tfvars "subscription_display_name"

          Write-Host "Parsed: create_subscription=$createSubscription, alias=$aliasName, display_name=$displayName, spoke_subscription_id(tfvars)=$spokeSubInVars"

          Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$createSubscription"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=displayName]$displayName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeSubInVars"

    - task: AzureCLI@2
      name: step0
      displayName: "Step0 - Ensure Subscription (Skip if exists)"
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(tfDir)"
          $alias  = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name not found (empty)" }

          $targetAddress = "azapi_resource.subscription[0]"
          $aliasRid = "/providers/Microsoft.Subscription/aliases/$alias"

          function Get-SubIdFromAlias([string]$AliasName) {
            if (-not $AliasName) { return "" }
            try {
              $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            try {
              $id = az resource show --ids "/providers/Microsoft.Subscription/aliases/$AliasName" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            return ""
          }

          function Import-State([string]$Rid) {
            try {
              Push-Location $tfDir
              terraform init -no-color | Out-Null
              terraform import -no-color $targetAddress $Rid 2>$null
            } catch {
              Write-Host "Import ignored: $($_.Exception.Message)"
            } finally {
              Pop-Location
            }
          }

          Write-Host "== Step0: Pre-check alias existence =="
          $existingSubId = ""
          for ($i=0; $i -lt 6 -and -not $existingSubId; $i++) {
            $existingSubId = Get-SubIdFromAlias -AliasName $alias
            if ($existingSubId) { break }
            Start-Sleep -Seconds 5
          }
          if ($existingSubId) {
            Write-Host "Alias exists. Skip creation. alias=$alias subId=$existingSubId"
            Import-State -Rid $aliasRid
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existingSubId"
            return
          }

          Write-Host "Alias not found. Creating..."
          Push-Location $tfDir
          $created = $false
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed." }
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -eq 0) {
              $created = $true
            } else {
              Write-Warning "terraform apply failed (exit $LASTEXITCODE). Will poll for alias anyway."
            }
          } catch {
            Write-Warning "Exception during apply: $($_.Exception.Message)"
          } finally {
            Pop-Location
          }

          $subId = ""
          for ($i=0; $i -lt 36 -and -not $subId; $i++) {
            $subId = Get-SubIdFromAlias -AliasName $alias
            if ($subId) { break }
            Start-Sleep -Seconds 10
          }
          if (-not $subId) {
            throw "SubscriptionId not resolved (alias=$alias) after 360s."
          }

          if (-not $created) {
            Write-Host "Apply not confirmed; importing existing alias into state."
            Import-State -Rid $aliasRid
          }

          Write-Host "subscriptionId acquired: $subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"

    - task: PowerShell@2
      name: decideSub
      displayName: "Decide Spoke Subscription ID"
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromCreate = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromCreate) { $fromCreate } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") {
              throw "Spoke subscription ID could not be resolved (creation expected)."
            } else {
              throw "spoke_subscription_id must be set (create_subscription=false)."
            }
          }
          Write-Host "Using Spoke Subscription ID: $final"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"

    - task: AzureCLI@2
      displayName: "Step1 - Apply Resource Group (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
            az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve -target=azurerm_resource_group.rg
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Step2 - Apply VNet (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network.vnet
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Step3 - Apply Subnet / NSG (targets)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve `
              -target=azurerm_network_security_group.subnet_nsg `
              -target=azurerm_subnet.subnet `
              -target=azurerm_subnet_network_security_group_association.subnet_assoc
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Step4a - Peering Hub→Spoke (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network_peering.hub_to_spoke
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Step4b - Peering Spoke→Hub (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network_peering.spoke_to_hub
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Final (Optional) Full Apply"
      enabled: false
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform plan  -no-color -out=full.out
            terraform apply -no-color -auto-approve full.out
          } finally { Pop-Location }

    - task: AzureCLI@2
      displayName: "Verify Peering (spoke-to-hub)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform show -json | Out-File tfstate.json -Encoding utf8
            $json = Get-Content tfstate.json -Raw | ConvertFrom-Json
          } finally { Pop-Location }
          $vnetRes = $json.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
          if (-not $vnetRes) { throw "VNet resource not found in state." }
          $spokeVnet = $vnetRes.values.name
          $spokeRg   = $vnetRes.values.resource_group_name
          $state = az network vnet peering show `
              --resource-group $spokeRg `
              --vnet-name $spokeVnet `
              --name "spoke-to-hub" `
              --query peeringState -o tsv 2>$null
          if (-not $state) { throw "spoke-to-hub peering not found (RG=$spokeRg VNet=$spokeVnet)" }
          Write-Host "Peering 'spoke-to-hub' state: $state"