# ===========================================================
# Azure DevOps Pipeline: サブスクリプション＋NW/Bastion/NATGW構築用
# ===========================================================

parameters:
  - name: environment_id
    type: string
    default: dev
    values: [cmn, dev, stg, prd]
  - name: project_name
    type: string
    default: bft
  - name: email
    type: string
    default: ""
  - name: vnet_type
    type: string
    default: private
    values: [private, public]
  - name: management_group_id
    type: string
    default: "/providers/Microsoft.Management/managementGroups/mg-bft-test"

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: USE_TARGETED_APPLY
    value: true
  - name: azureServiceConnection
    value: snp-pipeline-api-wif
  - name: vnet_type
    value: ${{ parameters.vnet_type }}

stages:
  - stage: provision_all
    displayName: Provision Subscription + Network
    jobs:
      - job: terraform_job
        displayName: Terraform Orchestration
        steps:
          - checkout: self

          # Terraformインストール
          - task: TerraformInstaller@1
            displayName: Install Terraform 1.7.5
            inputs:
              terraformVersion: 1.7.5

          # Step0: サブスクリプション作成または再利用
          - task: AzureCLI@2
            name: step0
            displayName: Step0 - Subscription (create or reuse)
            env:
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                $tfDir = "$(Build.SourcesDirectory)/terraform"

                function Get-TfVar {
                  param([string]$Path,[string]$Key)
                  if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
                  $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
                  if (-not $line) { return "" }
                  $val = $line -replace "^\s*$Key\s*=\s*", ""
                  if ($val -match "#") { $val = ($val -split "#")[0] }
                  $val.Trim().Trim('"')
                }

                function Is-Guid([string]$s) {
                  return $s -match '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
                }

                function Slugify([string]$s) {
                  if (-not $s) { return "" }
                  $t = $s.Trim().ToLower()
                  $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
                  $t = $t -replace "[^0-9a-z\-]", "-"
                  return $t.Trim("-")
                }

                function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
                  $p1 = Slugify $project
                  $p2raw = Slugify $purpose
                  $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
                  $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
                  return ($parts -join "-")
                }

                function Get-AliasName($tfvarsPath) {
                  $explicit = Get-TfVar $tfvarsPath "subscription_alias_name"
                  if ($explicit) { return $explicit }
                  $projectParam = "${{ parameters.project_name }}"
                  $purpose = Get-TfVar $tfvarsPath "purpose_name"
                  $envId   = "${{ parameters.environment_id }}"
                  $regionCode = Get-TfVar $tfvarsPath "region_code"
                  $seq     = Get-TfVar $tfvarsPath "sequence"
                  $base    = Build-Base $projectParam $purpose $envId $regionCode $seq
                  if (-not $base) { throw "cannot build alias base (check tfvars: purpose_name/region_code/sequence)" }
                  return "alias-$base"
                }

                function Get-AliasStateField([string]$field){
                  $out = terraform state show azapi_resource.subscription[0] 2>$null
                  if (-not $out) { return $null }
                  $m = $out | Select-String -Pattern "^\s*$field\s*=\s*""([^""]+)""" | Select-Object -First 1
                  if ($m) { return $m.Matches[0].Groups[1].Value }
                  return $null
                }

                function Try-GetSubIdViaAliasIdFromState {
                  $aliasId = Get-AliasStateField "id"
                  if (-not $aliasId) { return $null }
                  $uri = "https://management.azure.com$aliasId?api-version=2021-10-01"
                  $sid = az rest --method get --uri $uri --query "properties.subscriptionId" -o tsv 2>$null
                  if ($sid -and (Is-Guid $sid)) { return $sid }
                  return $null
                }

                function Try-GetSubIdViaAliasName([string]$aliasName) {
                  $uri = "https://management.azure.com/providers/Microsoft.Subscription/aliases/$aliasName?api-version=2021-10-01"
                  $sid = az rest --method get --uri $uri --query "properties.subscriptionId" -o tsv 2>$null
                  if ($sid -and (Is-Guid $sid)) { return $sid }
                  return $null
                }

                # ===== 変数取得 =====
                $tfvars = Join-Path $tfDir "terraform.tfvars"
                $hubSubId = Get-TfVar $tfvars "hub_subscription_id"
                if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

                $createSub = Get-TfVar $tfvars "create_subscription"
                $finalSubId = Get-TfVar $tfvars "spoke_subscription_id"

                if ($createSub -eq "true") {
                  Push-Location $tfDir
                  try {
                    terraform init -no-color -input=false

                    # 1) alias リソースのみ作成（azurerm に触れない）
                    terraform apply -no-color -input=false -auto-approve -target "azapi_resource.subscription[0]"
                    if ($LASTEXITCODE -ne 0) { throw "subscription create failed" }

                    # 2) data を単体ターゲットで読み出し（refresh-only を使わない）
                    terraform apply -no-color -input=false -auto-approve -target "data.azapi_resource.subscription_get[0]"
                    if ($LASTEXITCODE -ne 0) { throw "read alias (data) failed" }

                    # 3) 生成 ID を取得（output → REST フォールバック）
                    $createdSubId = $null
                    $aliasName = Get-AliasName $tfvars

                    for ($i=1; $i -le 36 -and -not $createdSubId; $i++) {
                      try {
                        $raw = terraform output -raw created_subscription_id 2>$null
                        if ($raw -and (Is-Guid $raw)) { $createdSubId = $raw }
                      } catch {}

                      if (-not $createdSubId) {
                        $createdSubId = Try-GetSubIdViaAliasIdFromState
                      }

                      if (-not $createdSubId -and $aliasName) {
                        $createdSubId = Try-GetSubIdViaAliasName -aliasName $aliasName
                      }

                      if (-not $createdSubId) {
                        Write-Host "[Step0] Waiting subscriptionId... ($i/36)"
                        Start-Sleep -Seconds 10
                      }
                    }

                    if (-not $createdSubId) { throw "created_subscription_id could not be retrieved after creation (timed out)." }

                    # 4) Azure CLI が新規サブスクを認識するまで待機（'not known by Azure CLI' 回避）
                    for ($j=1; $j -le 60; $j++) {
                      az account list --refresh 1>$null 2>$null
                      az account show --subscription $createdSubId -o none 2>$null
                      if ($LASTEXITCODE -eq 0) { break }
                      Start-Sleep -Seconds 10
                    }

                    Write-Host "Created SubscriptionId: $createdSubId"
                    Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$createdSubId"
                  } finally {
                    Pop-Location
                  }
                } elseif ($createSub -eq "false") {
                  if (-not $finalSubId) { throw "spoke_subscription_id missing for existing subscription use." }
                  if (-not (Is-Guid $finalSubId)) { throw "spoke_subscription_id must be a GUID. Actual: $finalSubId" }
                  Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
                } else {
                  throw "create_subscription must be true or false in tfvars."
                }

                # Hub側のサブスクリプションIDも出力
                Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"


          # Step1: リソースグループ作成
          - task: AzureCLI@2
            displayName: Step1 - Resource Group
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                # 新規サブスクの認識を明示的に更新してから set
                az account list --refresh 1>$null
                az account set --subscription $env:ARM_SUBSCRIPTION_ID

                # tfvars/命名関数
                function Get-TfVar {
                  param([string]$Path,[string]$Key)
                  if (-not (Test-Path $Path)) { return "" }
                  $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
                  if (-not $line) { return "" }
                  $val = $line -replace "^\s*$Key\s*=\s*", ""
                  if ($val -match "#") { $val = ($val -split "#")[0] }
                  $val.Trim().Trim('"')
                }
                function Slugify([string]$s) {
                  if (-not $s) { return "" }
                  $t = $s.Trim().ToLower()
                  $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
                  $t = $t -replace "[^0-9a-z\-]", "-"
                  return $t.Trim("-")
                }
                function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
                  $p1 = Slugify $project
                  $p2raw = Slugify $purpose
                  $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
                  $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
                  return ($parts -join "-")
                }
                $tfDir = "$(Build.SourcesDirectory)/terraform"
                $tfvars = Join-Path $tfDir "terraform.tfvars"
                $projectParam = "${{ parameters.project_name }}"
                $purpose = Get-TfVar $tfvars "purpose_name"
                $envId   = "${{ parameters.environment_id }}"
                $regionCode = Get-TfVar $tfvars "region_code"
                $seq     = Get-TfVar $tfvars "sequence"
                $base    = Build-Base $projectParam $purpose $envId $regionCode $seq
                $expectedRgName = "rg-$base"
                $rgId = "/subscriptions/$env:ARM_SUBSCRIPTION_ID/resourceGroups/$expectedRgName"
                Push-Location $tfDir
                try {
                  terraform init -no-color -input=false
                  terraform state show azurerm_resource_group.rg 1>$null 2>$null
                  if ($LASTEXITCODE -ne 0) {
                    $exists = az group exists --name $expectedRgName --subscription $env:ARM_SUBSCRIPTION_ID
                    if ($exists -eq "true") {
                      Write-Host "[Step1] Importing existing RG: $rgId"
                      terraform import -no-color azurerm_resource_group.rg $rgId
                      if ($LASTEXITCODE -ne 0) { throw "terraform import RG failed" }
                    }
                  }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_resource_group.rg
                  if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
                } finally { Pop-Location }

          # Step1.5: PIM（Owner/Contributorのロール管理ポリシー）
          - task: AzureCLI@2
            displayName: Step1.5 - PIM (Owner/Contributor policies)
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              # 自動作成を有効にする場合（変数定義が必要）
              TF_VAR_pim_auto_create_approver_groups: true
              # 既存グループを使う場合は上記を false にし、以下を実在の displayName に置き換えて指定
              # TF_VAR_pim_owner_approver_group_names: '["grp-<proj>-pim-owner-approver-<env>-<region>-<seq>"]'
              # TF_VAR_pim_contributor_approver_group_names: '["grp-<proj>-pim-contributor-approver-<env>-<region>-<seq>"]'
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false

                  # 1) 承認者グループ（必要時のみ作成）
                  terraform apply -no-color -input=false -auto-approve `
                    -target azuread_group.pim_owner_approver `
                    -target azuread_group.pim_contributor_approver
                  if ($LASTEXITCODE -ne 0) { throw "Approver group creation failed" }

                  # 2) PIMロール定義の読み込み（明示ターゲット）
                  terraform apply -no-color -input=false -auto-approve `
                    -target data.azurerm_role_definition.pim_owner_role `
                    -target data.azurerm_role_definition.pim_contributor_role
                  if ($LASTEXITCODE -ne 0) { throw "Read role definitions failed" }

                  # 3) PIMポリシー適用
                  terraform apply -no-color -input=false -auto-approve `
                    -target azurerm_role_management_policy.pim_owner_role_rules `
                    -target azurerm_role_management_policy.pim_contributor_role_rules
                  if ($LASTEXITCODE -ne 0) { throw "PIM apply failed" }
                } finally { Pop-Location }

          # Step2: VNet作成
          - task: AzureCLI@2
            displayName: Step2 - VNet
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network.vnet
                  if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
                } finally { Pop-Location }

          # Step3a: サブネット作成
          - task: AzureCLI@2
            displayName: Step3a - Subnet
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target azurerm_subnet.bastion_subnet `
                    -target azurerm_subnet.subnet
                  if ($LASTEXITCODE -ne 0) { throw "Subnet apply failed" }
                } finally { Pop-Location }

          # Step3b: NSG作成
          - task: AzureCLI@2
            displayName: Step3b - NSG
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target azurerm_network_security_group.subnet_nsg `
                    -target azurerm_network_security_group.bastion_nsg
                  if ($LASTEXITCODE -ne 0) { throw "NSG apply failed" }
                } finally { Pop-Location }

          # Step3c: NSGアタッチ
          - task: AzureCLI@2
            displayName: Step3c - NSGアタッチ
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target azurerm_subnet_network_security_group_association.subnet_assoc `
                    -target azurerm_subnet_network_security_group_association.bastion_assoc
                  if ($LASTEXITCODE -ne 0) { throw "NSG attach apply failed" }
                } finally { Pop-Location }

          # Step4: プライベート環境のみルートテーブル関連リソース
          - task: AzureCLI@2
            displayName: Step4 - Route Table (private only)
            condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target azurerm_route_table.route_table_private `
                    -target azurerm_route.route_default_to_gateway `
                    -target azurerm_route.route_kms1 `
                    -target azurerm_route.route_kms2 `
                    -target azurerm_route.route_kms3 `
                    -target azurerm_subnet_route_table_association.subnet_rt_assoc
                  if ($LASTEXITCODE -ne 0) { throw "Route table apply failed" }
                } finally { Pop-Location }

          # Step5: パブリック環境のみNAT Gateway関連リソース
          - task: AzureCLI@2
            displayName: Step5 - NAT Gateway (public only)
            condition: and(succeeded(), eq(variables['vnet_type'], 'public'))
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve -target azurerm_public_ip.natgw_pip
                  if ($LASTEXITCODE -ne 0) { throw "NATGW PIP creation failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_public_ip_prefix.natgw_prefix
                  if ($LASTEXITCODE -ne 0) { throw "Prefix creation failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_nat_gateway.natgw
                  if ($LASTEXITCODE -ne 0) { throw "NATGW creation failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_nat_gateway_public_ip_association.natgw_pip_assoc
                  if ($LASTEXITCODE -ne 0) { throw "PIP attach failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_nat_gateway_public_ip_prefix_association.natgw_prefix_assoc
                  if ($LASTEXITCODE -ne 0) { throw "Prefix attach failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_subnet_nat_gateway_association.subnet_natgw_assoc
                  if ($LASTEXITCODE -ne 0) { throw "Subnet NATGW assoc failed" }
                } finally { Pop-Location }

          # Step6: Bastion構成（全環境共通）
          - task: AzureCLI@2
            displayName: Step6 - Bastion (all)
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve -target azurerm_public_ip.bastion_pip
                  if ($LASTEXITCODE -ne 0) { throw "Bastion PIP creation failed" }
                  terraform apply -no-color -input=false -auto-approve -target azurerm_bastion_host.bastion
                  if ($LASTEXITCODE -ne 0) { throw "Bastion Host creation failed" }
                } finally { Pop-Location }

          # Step7a: Hub→Spoke Peering（プライベート環境のみ）
          - task: AzureCLI@2
            displayName: Step7a - Peering Hub->Spoke
            condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
              HUB_SUBSCRIPTION_ID: $(hubSubscriptionId)
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:HUB_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network_peering.hub_to_spoke
                  if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
                } finally { Pop-Location }

          # Step7b: Spoke→Hub Peering（プライベート環境のみ）
          - task: AzureCLI@2
            displayName: Step7b - Peering Spoke->Hub
            condition: and(succeeded(), eq(variables['vnet_type'], 'private'))
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: ${{ parameters.vnet_type }}
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(Build.SourcesDirectory)/terraform"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network_peering.spoke_to_hub
                  if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
                } finally { Pop-Location }
