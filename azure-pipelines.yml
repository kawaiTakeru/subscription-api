# subscription-api / azure-pipelines.yml
trigger: none
pr: none

pool:
  name: Default

variables:
  - name: System.Debug
    value: 'true'

stages:
# =========================================================
# Stage0: Subscription (Create via AzAPI)
# =========================================================
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    steps:
    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $clientId = az account show --query user.name -o tsv
          $tenantId = az account show --query tenantId -o tsv
          $subName  = az account show --query name -o tsv
          $subId    = az account show --query id -o tsv

          $sp      = az ad sp show --id $clientId --only-show-errors
          $spJson  = $sp | ConvertFrom-Json
          $spObjId = $spJson.id
          $spName  = $spJson.displayName

          Write-Host "== Service Connection =="
          Write-Host "tenantId    : $tenantId"
          Write-Host "subscription: $subName ($subId)"
          Write-Host "clientId    : $clientId"
          Write-Host "spObjectId  : $spObjId"
          Write-Host "spName      : $spName"
          Write-Host ""
          Write-Host "== Current role assignments for this SP (all scopes) =="
          az role assignment list --assignee $spObjId --all -o table

    - task: AzureCLI@2
      name: tf
      displayName: 'Terraform init/plan/apply (Stage0)'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $stageDir = "$(Build.SourcesDirectory)\terraform\stage0-subscription"
          $tfvars   = "$(Build.SourcesDirectory)\terraform\stage0-subscription\terraform.tfvars"

          function Get-AliasNameFromTfvars([string]$Path) {
            if (-not (Test-Path -LiteralPath $Path)) { return "" }
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match '^\s*subscription_alias_name\s*=' } | Select-Object -First 1
            if ($line) { return ($line -replace '^\s*subscription_alias_name\s*=\s*"?([^"]+)"?\s*$', '$1') }
            return ""
          }

          function Get-SubIdViaAz([string]$AliasName) {
            if ([string]::IsNullOrWhiteSpace($AliasName)) { return "" }
            try {
              $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            try {
              $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
              $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            return ""
          }

          function Wait-SubscriptionReady([string]$AliasName, [int]$MaxSeconds, [int]$IntervalSeconds) {
            $deadline = (Get-Date).AddSeconds($MaxSeconds)
            while ((Get-Date) -lt $deadline) {
              $id = ""
              try {
                $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              try {
                $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
                $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              Start-Sleep -Seconds $IntervalSeconds
            }
            return ""
          }

          if (-not (Test-Path -LiteralPath $tfvars)) {
            throw ("terraform.tfvars not found: " + $tfvars)
          }

          $aliasName = Get-AliasNameFromTfvars -Path $tfvars
          if ([string]::IsNullOrWhiteSpace($aliasName)) {
            throw "subscription_alias_name is empty in tfvars. Set it first."
          }

          # 出力変数（右辺ベタ置きで確実化）
          Write-Host "##vso[task.setvariable variable=subscriptionAlias;isOutput=true]$aliasName"

          # 既存 alias チェック
          $existingSubId = Get-SubIdViaAz -AliasName $aliasName
          if ($existingSubId) {
            Write-Host "Alias already exists. Skip Terraform. alias=$aliasName subId=$existingSubId"

            try {
              Set-Location $stageDir
              terraform init
              $rid = "/providers/Microsoft.Subscription/aliases/$aliasName"
              terraform import -no-color azapi_resource.subscription $rid 2>$null
              if ($LASTEXITCODE -ne 0) { Write-Host "terraform import skipped (not critical)." }
            } catch {
              Write-Host "terraform import failed but ignored."
            } finally {
              Set-Location "$(Build.SourcesDirectory)"
            }

            Write-Host "subscriptionId=$existingSubId"
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]$existingSubId"
            return
          }

          # 新規作成
          $orig = Get-Location
          try {
            Set-Location $stageDir
            terraform init
            terraform plan -var-file="$tfvars" -out plan.out
            terraform apply -auto-approve plan.out
          } finally {
            Set-Location $orig
          }

          # output or wait
          $subId = ""
          try { $subId = terraform -chdir="$stageDir" output -raw subscription_id } catch {}
          if (-not $subId) {
            $subId = Wait-SubscriptionReady -AliasName $aliasName -MaxSeconds 360 -IntervalSeconds 10
          }

          if ($subId) {
            Write-Host "subscriptionId=$subId"
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]$subId"
          } else {
            Write-Warning "subscriptionId not resolved in Stage0 (alias may still be provisioning)."
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]"
          }

# =========================================================
# Stage1: Resource Group
# =========================================================
- stage: stage1_rg
  displayName: "Stage1 - Resource Group"
  dependsOn: stage0_subscription
  condition: succeeded('stage0_subscription')
  jobs:
  - job: apply_rg
    displayName: "RG作成"
    variables:
      # <stage>.<job>.outputs['<step>.<var>']
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
      subscriptionAlias:        $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionAlias'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        $sub = "$(subscriptionIdFromStage0)"
        if ([string]::IsNullOrWhiteSpace($sub)) { throw "subscriptionIdFromStage0 is empty" }
        Write-Host "subscriptionIdFromStage0=$sub"
        Write-Host "subscriptionAlias=$(subscriptionAlias)"
      displayName: "Echo subId (debug)"
    - task: AzureCLI@2
      displayName: "Terraform apply (Stage1 RG)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage1-rg"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage2: VNet
# =========================================================
- stage: stage2_vnet
  displayName: "Stage2 - VNet"
  dependsOn:
  - stage0_subscription      # ← 追加
  - stage1_rg                # 既存
  condition: and(succeeded('stage1_rg'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_vnet
    displayName: "VNet作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"
    - task: AzureCLI@2
      displayName: "Terraform apply (Stage2 VNet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage3: Subnet + NSG + 関連付け
# =========================================================
- stage: stage3_subnet
  displayName: "Stage3 - Subnet"
  dependsOn:
  - stage0_subscription      # ← 追加
  - stage2_vnet              # 既存
  condition: and(succeeded('stage2_vnet'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_subnet
    displayName: "Subnet + NSG + 関連付け"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"
    - task: AzureCLI@2
      displayName: "Terraform apply (Stage3 Subnet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage3-subnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage4a: Peering Spoke -> Hub
# =========================================================
- stage: stage4a_peering_spoke_to_hub
  displayName: "Stage4a - Peering Spoke → Hub"
  dependsOn:
  - stage0_subscription
  - stage3_subnet
  condition: and(succeeded('stage3_subnet'), succeeded('stage0_subscription'))
  jobs:
  - job: peering_spoke_to_hub
    displayName: "Spoke → Hub ピアリング作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"

    # ---- 追加: Stage2 の state から Spoke VNet/RG を取得して TF_VAR_* に注入 ----
    - task: AzureCLI@2
      displayName: "Resolve Spoke VNet/RG from Stage2 state"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          $stage2Dir = "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          Push-Location $stage2Dir
          try {
            terraform init -no-color -input=false | Out-Null
            $json = terraform show -json
          } finally { Pop-Location }

          if (-not $json) { throw "terraform show -json returned empty." }
          $obj = $json | ConvertFrom-Json
          $resources = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" }
          if (-not $resources) { throw "No azurerm_virtual_network found in Stage2 state." }

          # 最初の VNet を採用（複数あれば要件に合わせて絞り込み）
          $spokeVnetName = $resources[0].values.name
          $spokeRgName   = $resources[0].values.resource_group_name

          if ([string]::IsNullOrWhiteSpace($spokeVnetName) -or [string]::IsNullOrWhiteSpace($spokeRgName)) {
            throw "Failed to resolve Spoke VNet name or RG name."
          }

          Write-Host "Resolved Spoke VNet: $spokeVnetName / RG: $spokeRgName"

          # Terraform が拾えるよう TF_VAR_* をエクスポート
          Write-Host "##vso[task.setvariable variable=TF_VAR_spoke_vnet_name;isOutput=false]$spokeVnetName"
          Write-Host "##vso[task.setvariable variable=TF_VAR_spoke_rg_name;isOutput=false]$spokeRgName"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage4a Spoke→Hub)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription (spoke): $(subscriptionIdFromStage0)"

          # ---- 重要：TF_VAR_* を環境変数として注入（前ステップで設定済み）----
          $env:ARM_USE_AZCLI_AUTH = "true"
          $env:TF_VAR_spoke_vnet_name = "$(TF_VAR_spoke_vnet_name)"
          $env:TF_VAR_spoke_rg_name   = "$(TF_VAR_spoke_rg_name)"

          Push-Location "$(Build.SourcesDirectory)\terraform\stage4a-peering-spoke-to-hub"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage4b: Peering Hub -> Spoke
# =========================================================
- stage: stage4b_peering_hub_to_spoke
  displayName: "Stage4b - Peering Hub → Spoke"
  dependsOn:
  - stage4a_peering_spoke_to_hub
  condition: succeeded('stage4a_peering_spoke_to_hub')
  jobs:
  - job: peering_hub_to_spoke
    displayName: "Hub → Spoke ピアリング作成"
    steps:
    # ---- 4b 側でも再解決（安全のため）。4a の出力を流用してもOK ----
    - task: AzureCLI@2
      displayName: "Resolve Spoke VNet/RG from Stage2 state (again)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          # spoke 側の state を読むだけなので sub 切替は不要だが、合わせておく
          # （必要なら Stage0 の subId を受け渡して再利用しても可）
          # ここでは簡素化のため切替省略

          $stage2Dir = "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          Push-Location $stage2Dir
          try {
            terraform init -no-color -input=false | Out-Null
            $json = terraform show -json
          } finally { Pop-Location }

          if (-not $json) { throw "terraform show -json returned empty." }
          $obj = $json | ConvertFrom-Json
          $resources = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" }
          if (-not $resources) { throw "No azurerm_virtual_network found in Stage2 state." }

          $spokeVnetName = $resources[0].values.name
          $spokeRgName   = $resources[0].values.resource_group_name

          Write-Host "Resolved Spoke VNet: $spokeVnetName / RG: $spokeRgName"
          Write-Host "##vso[task.setvariable variable=TF_VAR_spoke_vnet_name;isOutput=false]$spokeVnetName"
          Write-Host "##vso[task.setvariable variable=TF_VAR_spoke_rg_name;isOutput=false]$spokeRgName"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage4b Hub→Spoke)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $hubSub = "7d1f78e5-bc6c-4018-847f-336ff47b9436"
          az account set --subscription $hubSub
          Write-Host "Using subscription (hub): $hubSub"

          $env:ARM_USE_AZCLI_AUTH = "true"
          $env:TF_VAR_spoke_vnet_name = "$(TF_VAR_spoke_vnet_name)"
          $env:TF_VAR_spoke_rg_name   = "$(TF_VAR_spoke_rg_name)"

          Push-Location "$(Build.SourcesDirectory)\terraform\stage4b-peering-hub-to-spoke"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }
