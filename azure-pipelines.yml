# subscription-api / azure-pipelines.yml
trigger: none
pr: none

pool:
  name: Default

variables:
  - name: System.Debug
    value: 'true'

stages:
# =========================================================
# Stage0: Subscription (Create via AzAPI)
# =========================================================
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    steps:
    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    # ← どの Service Principal でログインしているかを特定
    - task: AzureCLI@2
      displayName: "WHOAMI (Service Connection 実体確認)"
      inputs:
        azureSubscription: 'snp-pipeline-api'   # ← 既存のサービス接続名
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $clientId = az account show --query user.name -o tsv
          $tenantId = az account show --query tenantId -o tsv
          $subName  = az account show --query name -o tsv
          $subId    = az account show --query id -o tsv

          $sp      = az ad sp show --id $clientId --only-show-errors
          $spObjId = ($sp | ConvertFrom-Json).id
          $spName  = ($sp | ConvertFrom-Json).displayName

          Write-Host "== Service Connection WHOAMI =="
          Write-Host ("tenantId   : {0}" -f $tenantId)
          Write-Host ("subscription: {0} ({1})" -f $subName, $subId)
          Write-Host ("clientId   : {0}" -f $clientId)
          Write-Host ("spObjectId : {0}" -f $spObjId)
          Write-Host ("spName     : {0}" -f $spName)

          Write-Host "`n== 現在のSPに付いているロール (全スコープ) =="
          az role assignment list --assignee $spObjId --all -o table

    # ← AzureCLI@2 で Service connection によりログインし、Terraform 実行
    - task: AzureCLI@2
      name: tf
      displayName: 'Terraform init/plan/apply (Stage0)'
      inputs:
        azureSubscription: 'snp-pipeline-api'        # ← 作成済みサービス接続名
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $stageDir = "$(Build.SourcesDirectory)/terraform/stage0-subscription"
          $tfvars   = "$(Build.SourcesDirectory)/terraform/stage0-subscription/terraform.tfvars"

          if (-not (Test-Path $tfvars)) {
            Write-Host "Repo root:" $(Build.SourcesDirectory)
            Get-ChildItem -Recurse "$(Build.SourcesDirectory)/terraform" | Select-Object FullName
            throw ("terraform.tfvars が見つかりません: {0}" -f $tfvars)
          }

          Push-Location $stageDir

          Write-Host "== terraform init =="
          terraform init

          Write-Host "== terraform plan =="
          terraform plan -var-file="$tfvars" -out plan.out

          Write-Host "== terraform apply =="
          terraform apply -auto-approve plan.out

          # まずは Terraform の output を試みる
          $subId = ""
          try { $subId = terraform output -raw subscription_id } catch {}

          # もし state にまだ出ていなければフォールバック (Alias -> subscriptionId)
          if (-not $subId) {
            # tfvars から alias 名を抽出（ダブルクォートを含む行でも安全）
            $aliasName = ""
            try {
              $line = (Get-Content -LiteralPath $tfvars | Where-Object { $_ -match '^\s*subscription_alias_name\s*=' } | Select-Object -First 1)
              if ($line) {
                $aliasName = $line -replace '^\s*subscription_alias_name\s*=\s*"?([^"]+)"?\s*$', '$1'
              }
            } catch {
              $aliasName = ""
            }

            if ([string]::IsNullOrWhiteSpace($aliasName)) {
              Write-Warning "subscription_alias_name が tfvars から取得できませんでした。フォールバックをスキップします。"
            } else {
              $aliasId = "/providers/Microsoft.Subscription/aliases/$aliasName"
              $api = "2021-10-01"

              # 反映待ちのためリトライ（最大10回、3秒間隔）
              $max = 10
              for ($i=1; $i -le $max -and (-not $subId); $i++) {
                try {
                  $resp = az rest --method GET --url ("https://management.azure.com{0}?api-version={1}" -f $aliasId, $api) | ConvertFrom-Json
                  $subId = $resp.properties.subscriptionId
                } catch {
                  # ignore and retry
                }
                if (-not $subId) { Start-Sleep -Seconds 3 }
              }
            }
          }

          Write-Host ("subscriptionId={0}" -f $subId)
          Write-Host ("##vso[task.setvariable variable=subscriptionId;isOutput=true]{0}" -f $subId)

          Pop-Location

# =========================================================
# Stage1〜4: プレースホルダー
# =========================================================

# Stage1: Resource Group
- stage: stage1_rg
  displayName: "Stage1 - Resource Group"
  dependsOn: stage0_subscription
  variables:
    subscriptionId: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
  jobs:
  - job: placeholder_rg
    steps:
    - task: AzureCLI@2
      displayName: "[RG] placeholder"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          echo "[RG] placeholder"
          echo "SubscriptionId from Stage0: $(subscriptionId)"
          if [ -n "$(subscriptionId)" ]; then
            az account set --subscription "$(subscriptionId)"
            az account show --query "{id:id,name:name}" -o tsv || true
          fi

# Stage2: VNet
- stage: stage2_vnet
  displayName: "Stage2 - VNet"
  dependsOn: stage1_rg
  jobs:
  - job: placeholder_vnet
    steps:
    - bash: echo "[VNET] placeholder"

# Stage3: Subnet
- stage: stage3_subnet
  displayName: "Stage3 - Subnet"
  dependsOn: stage2_vnet
  jobs:
  - job: placeholder_subnet
    steps:
    - bash: echo "[SUBNET] placeholder"

# Stage4a: Peering Spoke->Hub
- stage: stage4a_peering_s2h
  displayName: "Stage4a - Peering Spoke->Hub"
  dependsOn: stage3_subnet
  jobs:
  - job: placeholder_peering_s2h
    steps:
    - bash: echo "[PEERING S->H] placeholder"

# Stage4b: Peering Hub->Spoke
- stage: stage4b_peering_h2s
  displayName: "Stage4b - Peering Hub->Spoke"
  dependsOn: stage4a_peering_s2h
  jobs:
  - job: placeholder_peering_h2s
    steps:
    - bash: echo "[PEERING H->S] placeholder"
