# subscription-api / azure-pipelines.yml (Consolidated Single Stage + Step targets)
# 目的: 1 つの Terraform ルート (terraform/combined) を段階的 (-target) に適用
# 注意:
#   - Step0 でサブスクリプション(エイリアス)作成が必要な場合のみ targeted apply
#   - Step0 -> 出力 subscriptionId を後続 Step に TF_VAR_spoke_subscription_id として渡す
#   - WHOAMI ステップのパイプエラー修正済み（Write-Host へパイプしない）
#   - 必要に応じて Final Full Apply を有効化し drift/未適用差分を同期

trigger: none
pr: none

pool:
  vmImage: 'windows-2022'

variables:
  - name: System.Debug
    value: 'true'

stages:
- stage: provision_all
  displayName: "Provision (Subscription→RG→VNet→Subnet→Peering)"
  jobs:
  - job: terraform_job
    displayName: "Terraform Orchestration (single state)"
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    # ===================== WHOAMI (修正版) =====================
    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $acctJson = az account show -o json
          if (-not $acctJson) { throw "az account show returned empty." }
          $acct = $acctJson | ConvertFrom-Json
          $tenantId = $acct.tenantId
          $subName  = $acct.name
          $subId    = $acct.id
          $clientId = $acct.user.name

          Write-Host "== Service Connection Account =="
          Write-Host "tenantId      : $tenantId"
          Write-Host "subscription  : $subName"
          Write-Host "subscriptionId: $subId"
          Write-Host "clientId      : $clientId"

          Write-Host ""
          Write-Host "== Role Assignments (current SP) =="
          try {
            $sp = az ad sp show --id $clientId -o json 2>$null | ConvertFrom-Json
            if ($sp -and $sp.id) {
              Write-Host "spObjectId: $($sp.id)"
              az role assignment list --assignee $sp.id --all -o table
            } else {
              Write-Host "(Service principal object not resolved)"
            }
          } catch {
            Write-Host "(Failed to list role assignments: $($_.Exception.Message))"
          }

    # ----------------------------------------------------
    # 事前処理: tfvars から値抽出
    # ----------------------------------------------------
    - task: PowerShell@2
      name: prep
      displayName: "Prepare Variables (parse tfvars)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(Build.SourcesDirectory)\terraform\combined"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfDir))  { throw "Terraform directory not found: $tfDir" }
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

            function Get-TfvarsValue([string]$Path, [string]$Key) {
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              $val = $val.Trim().Trim('"')
              return $val
            }

            $createSubscription = (Get-TfvarsValue $tfvars "create_subscription")
            if ($createSubscription -match '^(?i:true|1)$') { $createSubscription = "true" } else { $createSubscription = "false" }
            $spokeSubInVars = Get-TfvarsValue $tfvars "spoke_subscription_id"
            $aliasName      = Get-TfvarsValue $tfvars "subscription_alias_name"

            Write-Host "Parsed: create_subscription=$createSubscription, alias=$aliasName, spoke_subscription_id(tfvars)=$spokeSubInVars"

            Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
            Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$createSubscription"
            Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
            Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeSubInVars"

    # ----------------------------------------------------
    # Step0: サブスクリプション作成 (必要時のみ)
    # ----------------------------------------------------
    - task: AzureCLI@2
      name: step0
      displayName: "Step0 - Create Subscription (target apply)"
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          $alias = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name not found in tfvars (alias is empty)" }

          Push-Location $tfDir
          try {
            terraform init -no-color

            # 既存 alias チェック
            $existing = ""
            try {
              $existing = az account alias show --name $alias --query "properties.subscriptionId" -o tsv 2>$null
            } catch {}

            if ($existing) {
              Write-Host "Alias already exists: $alias -> $existing (skip targeted apply)"
              Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
              return
            }

            Write-Host "Creating subscription alias via targeted apply..."
            terraform apply -no-color -auto-approve `
              -target=azapi_resource.subscription `
              -target=data.azapi_resource.subscription_get
            if ($LASTEXITCODE -ne 0) { throw "Targeted apply failed." }

            # 出力取得 (Terraform output or fallback polling)
            $subId = ""
            try { $subId = terraform output -raw subscription_id 2>$null } catch {}
            if (-not $subId) {
              Write-Host "subscription_id not yet in state. Polling AzAPI..."
              for ($i=0; $i -lt 30 -and -not $subId; $i++) {
                Start-Sleep -Seconds 10
                try {
                  $subId = az account alias show --name $alias --query "properties.subscriptionId" -o tsv 2>$null
                } catch {}
              }
            }
            if (-not $subId) { throw "Failed to resolve subscriptionId for alias $alias." }

            Write-Host "Resolved subscriptionId=$subId"
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          } finally {
            Pop-Location
          }

    # ----------------------------------------------------
    # Step0 後: Spoke Subscription ID 決定
    # ----------------------------------------------------
    - task: PowerShell@2
      name: decideSub
      displayName: "Decide Spoke Subscription ID"
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromCreate = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromCreate) { $fromCreate } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") {
              throw "Spoke subscription ID could not be resolved (creation expected)."
            } else {
              throw "spoke_subscription_id must be set in terraform.tfvars (create_subscription=false)."
            }
          }
          Write-Host "Using Spoke Subscription ID: $final"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"

    # ----------------------------------------------------
    # Step1: Resource Group
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Step1 - Apply Resource Group (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve -target=azurerm_resource_group.rg
          } finally { Pop-Location }

    # ----------------------------------------------------
    # Step2: VNet
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Step2 - Apply VNet (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network.vnet
          } finally { Pop-Location }

    # ----------------------------------------------------
    # Step3: Subnet + NSG + Association
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Step3 - Apply Subnet / NSG (targets)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve `
              -target=azurerm_network_security_group.subnet_nsg `
              -target=azurerm_subnet.subnet `
              -target=azurerm_subnet_network_security_group_association.subnet_assoc
          } finally { Pop-Location }

    # ----------------------------------------------------
    # Step4a: Hub -> Spoke Peering
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Step4a - Peering Hub→Spoke (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network_peering.hub_to_spoke
          } finally { Pop-Location }

    # ----------------------------------------------------
    # Step4b: Spoke -> Hub Peering
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Step4b - Peering Spoke→Hub (target)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform apply -no-color -auto-approve -target=azurerm_virtual_network_peering.spoke_to_hub
          } finally { Pop-Location }

    # ----------------------------------------------------
    # (任意) フル適用
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Final (Optional) Full Apply"
      enabled: false
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_IN_AUTOMATION: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform plan  -no-color -out=full.out
            terraform apply -no-color -auto-approve full.out
          } finally { Pop-Location }

    # ----------------------------------------------------
    # 検証: Peering 状態
    # ----------------------------------------------------
    - task: AzureCLI@2
      displayName: "Verify Peering (spoke-to-hub)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform show -json | Out-File tfstate.json -Encoding utf8
            $json = Get-Content tfstate.json -Raw | ConvertFrom-Json
          } finally { Pop-Location }

          $vnetRes = $json.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
          if (-not $vnetRes) { throw "VNet resource not found in state." }
          $spokeVnet = $vnetRes.values.name
          $spokeRg   = $vnetRes.values.resource_group_name

          $state = az network vnet peering show `
              --resource-group $spokeRg `
              --vnet-name $spokeVnet `
              --name "spoke-to-hub" `
              --query peeringState -o tsv 2>$null

          if (-not $state) {
            throw "spoke-to-hub peering not found (RG=$spokeRg VNet=$spokeVnet)"
          }
          Write-Host "Peering 'spoke-to-hub' state: $state"
