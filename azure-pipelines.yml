# subscription-api / azure-pipelines.yml  (Microsoft-hosted 移行版)
trigger: none
pr: none

pool:
  vmImage: 'windows-2022'    # Microsoft-hosted（Windows Server 2022 に固定）

variables:
  - name: System.Debug
    value: 'true'

stages:
# =========================================================
# Stage0: Subscription (Create via AzAPI)
# =========================================================
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    steps:
    - checkout: self

    # Microsoft-hosted なので各ジョブで Terraform を明示インストール
    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $clientId = az account show --query user.name -o tsv
          $tenantId = az account show --query tenantId -o tsv
          $subName  = az account show --query name -o tsv
          $subId    = az account show --query id -o tsv

          $sp      = az ad sp show --id $clientId --only-show-errors
          $spJson  = $sp | ConvertFrom-Json
          $spObjId = $spJson.id
          $spName  = $spJson.displayName

          Write-Host "== Service Connection =="
          Write-Host "tenantId    : $tenantId"
          Write-Host "subscription: $subName ($subId)"
          Write-Host "clientId    : $clientId"
          Write-Host "spObjectId  : $spObjId"
          Write-Host "spName      : $spName"
          Write-Host ""
          Write-Host "== Current role assignments for this SP (all scopes) =="
          az role assignment list --assignee $spObjId --all -o table

    # ★ 修正版：既存 Alias を az rest で検出 → TF_VAR_create_subscription を切替
    - task: AzureCLI@2
      name: tf
      displayName: "Terraform init/plan/apply (Stage0)"
      env:
        ARM_USE_AZCLI_AUTH: 'true'   # 子プロセス(Terraform/AzAPI)にCLI認証を継承
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # ---- paths ----
          $stageDir = "$(Build.SourcesDirectory)\terraform\stage0-subscription"
          $tfvars   = "$(Build.SourcesDirectory)\terraform\stage0-subscription\terraform.tfvars"

          # ---- helpers (RESTで Alias を読む: テナントスコープでも確実) ----
          function Get-AliasSubId([string]$AliasName) {
            if ([string]::IsNullOrWhiteSpace($AliasName)) { return "" }
            $uri = "https://management.azure.com/providers/Microsoft.Subscription/aliases/$AliasName?api-version=2021-10-01"
            try {
              $raw = az rest --method get --url $uri --only-show-errors 2>$null
              if ($LASTEXITCODE -eq 0 -and $raw) {
                $obj = $raw | ConvertFrom-Json
                if ($obj -and $obj.properties -and $obj.properties.subscriptionId) {
                  return ($obj.properties.subscriptionId)
                }
              }
            } catch {}
            return ""
          }

          function Wait-SubscriptionReady([string]$AliasName, [int]$MaxSeconds, [int]$IntervalSeconds) {
            $deadline = (Get-Date).AddSeconds($MaxSeconds)
            while ((Get-Date) -lt $deadline) {
              $id = Get-AliasSubId -AliasName $AliasName
              if ($id) { return $id }
              Start-Sleep -Seconds $IntervalSeconds
            }
            return ""
          }

          function Get-AliasNameFromTfvars([string]$Path) {
            if (-not (Test-Path -LiteralPath $Path)) { throw "terraform.tfvars not found: $Path" }
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match '^\s*subscription_alias_name\s*=' } | Select-Object -First 1
            if (-not $line) { throw "subscription_alias_name is empty in tfvars. Set it first." }
            return ($line -replace '^\s*subscription_alias_name\s*=\s*"?([^"]+)"?\s*$', '$1')
          }

          # ---- read alias from tfvars ----
          $aliasName = Get-AliasNameFromTfvars -Path $tfvars
          Write-Host "##vso[task.setvariable variable=subscriptionAlias;isOutput=true]$aliasName"

          # ---- detect existing alias via REST ----
          $existingSubId = Get-AliasSubId -AliasName $aliasName
          if ($existingSubId) {
            Write-Host "Alias exists: $aliasName (subId=$existingSubId)"
            $env:TF_VAR_create_subscription = "false"   # ← 重要！
          } else {
            Write-Host "Alias not found. Will create: $aliasName"
            $env:TF_VAR_create_subscription = "true"
          }

          # ---- terraform run (non-interactive) ----
          Push-Location $stageDir
          try {
            terraform init -no-color -input=false
            terraform plan -no-color -input=false -var-file="$tfvars" -out plan.out
            terraform apply -no-color -input=false -auto-approve plan.out
          } finally {
            Pop-Location
          }

          # ---- resolve subscriptionId ----
          $subId = ""
          try { $subId = terraform -chdir="$stageDir" output -raw subscription_id } catch {}
          if (-not $subId) {
            if ($existingSubId) { $subId = $existingSubId } else { $subId = Wait-SubscriptionReady -AliasName $aliasName -MaxSeconds 360 -IntervalSeconds 10 }
          }

          if ($subId) {
            Write-Host "subscriptionId=$subId"
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]$subId"
          } else {
            Write-Warning "subscriptionId not resolved in Stage0 (alias may still be provisioning)."
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]"
          }

# =========================================================
# Stage1: Resource Group
# =========================================================
- stage: stage1_rg
  displayName: "Stage1 - Resource Group"
  dependsOn: stage0_subscription
  condition: succeeded('stage0_subscription')
  jobs:
  - job: apply_rg
    displayName: "RG作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
      subscriptionAlias:        $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionAlias'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - checkout: self
    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        $sub = "$(subscriptionIdFromStage0)"
        if ([string]::IsNullOrWhiteSpace($sub)) { throw "subscriptionIdFromStage0 is empty" }
        Write-Host "subscriptionIdFromStage0=$sub"
        Write-Host "subscriptionAlias=$(subscriptionAlias)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage1 RG)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage1-rg"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage2: VNet
# =========================================================
- stage: stage2_vnet
  displayName: "Stage2 - VNet"
  dependsOn:
  - stage0_subscription
  - stage1_rg
  condition: and(succeeded('stage1_rg'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_vnet
    displayName: "VNet作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - checkout: self
    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage2 VNet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

    - task: AzureCLI@2
      name: resolve
      displayName: "Export Spoke VNet/RG to output variables"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          $dir = "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          Push-Location $dir
          try {
            terraform init -no-color -input=false | Out-Null
            $json = terraform show -json
          } finally { Pop-Location }

          if (-not $json) { throw "terraform show -json returned empty." }
          $obj = $json | ConvertFrom-Json
          $vnet = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
          if (-not $vnet) { throw "No azurerm_virtual_network found in Stage2 state." }

          $spokeVnetName = $vnet.values.name
          $spokeRgName   = $vnet.values.resource_group_name

          if ([string]::IsNullOrWhiteSpace($spokeVnetName) -or [string]::IsNullOrWhiteSpace($spokeRgName)) {
            throw "Failed to resolve Spoke VNet/RG."
          }

          Write-Host "Resolved Spoke: VNet=$spokeVnetName, RG=$spokeRgName"
          Write-Host "##vso[task.setvariable variable=spokeVnetName;isOutput=true]$spokeVnetName"
          Write-Host "##vso[task.setvariable variable=spokeRgName;isOutput=true]$spokeRgName"

# =========================================================
# Stage3: Subnet + NSG + 関連付け
# =========================================================
- stage: stage3_subnet
  displayName: "Stage3 - Subnet"
  dependsOn:
  - stage0_subscription
  - stage2_vnet
  condition: and(succeeded('stage2_vnet'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_subnet
    displayName: "Subnet + NSG + 関連付け"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - checkout: self
    - task: TerraformInstaller@1
      displayName: "Install Terraform 1.7.5"
      inputs:
        terraformVersion: '1.7.5'

    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage3 Subnet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage3-subnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage4a: Hub -> Spoke  （先に Hub 側）
# =========================================================
- stage: stage4a_peering_hub_to_spoke
  displayName: "Stage4a - Peering Hub → Spoke"
  dependsOn:
    - stage2_vnet
    - stage0_subscription
  condition: succeeded('stage2_vnet')
  jobs:
    - job: peering_hub_to_spoke
      displayName: "Hub → Spoke ピアリング作成"
      variables:
        spokeSubIdFromS0:    $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
        spokeVnetNameFromS2: $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeVnetName'] ]
        spokeRgNameFromS2:   $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeRgName'] ]
      condition: and(succeeded(),
                     ne(variables['spokeSubIdFromS0'], ''),
                     ne(variables['spokeVnetNameFromS2'], ''),
                     ne(variables['spokeRgNameFromS2'], ''))
      steps:
        - checkout: self
        - task: TerraformInstaller@1
          displayName: "Install Terraform 1.7.5"
          inputs:
            terraformVersion: '1.7.5'

        - powershell: |
            Write-Host "Spoke: sub=$(spokeSubIdFromS0) vnet=$(spokeVnetNameFromS2) rg=$(spokeRgNameFromS2)"
          displayName: "Echo spoke (debug)"

        - task: AzureCLI@2
          displayName: "Terraform apply (Stage4a Hub→Spoke)"
          env:
            ARM_USE_AZCLI_AUTH: 'true'
            TF_VAR_spoke_subscription_id: $(spokeSubIdFromS0)
            TF_VAR_spoke_vnet_name:       $(spokeVnetNameFromS2)
            TF_VAR_spoke_rg_name:         $(spokeRgNameFromS2)
          inputs:
            azureSubscription: 'snp-pipeline-api'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              $hubSub = "7d1f78e5-bc6c-4018-847f-336ff47b9436"
              az account set --subscription $hubSub
              Write-Host "Using subscription (hub): $hubSub"

              if ([string]::IsNullOrWhiteSpace($env:TF_VAR_spoke_subscription_id) -or
                  [string]::IsNullOrWhiteSpace($env:TF_VAR_spoke_vnet_name) -or
                  [string]::IsNullOrWhiteSpace($env:TF_VAR_spoke_rg_name)) {
                Write-Error "Missing TF vars. sub_id='$($env:TF_VAR_spoke_subscription_id)' vnet='$($env:TF_VAR_spoke_vnet_name)' rg='$($env:TF_VAR_spoke_rg_name)'"
              }

              Push-Location "$(Build.SourcesDirectory)\terraform\stage4a-peering-hub-to-spoke"
              try {
                terraform init  -no-color -input=false
                terraform plan  -no-color -input=false
                terraform apply -no-color -input=false -auto-approve
              } finally { Pop-Location }

# =========================================================
# Stage4b: Spoke -> Hub  （後で Spoke 側）
# =========================================================
- stage: stage4b_peering_spoke_to_hub
  displayName: "Stage4b - Peering Spoke → Hub"
  dependsOn:
    - stage0_subscription
    - stage2_vnet
    - stage4a_peering_hub_to_spoke
  condition: succeeded('stage4a_peering_hub_to_spoke')
  jobs:
    - job: peering_spoke_to_hub
      displayName: "Spoke → Hub ピアリング作成"
      variables:
        subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
        spokeVnetNameFromS2:      $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeVnetName'] ]
        spokeRgNameFromS2:        $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeRgName'] ]
      condition: and(succeeded(),
                     ne(variables['subscriptionIdFromStage0'], ''),
                     ne(variables['spokeVnetNameFromS2'], ''),
                     ne(variables['spokeRgNameFromS2'], ''))
      steps:
        - checkout: self
        - task: TerraformInstaller@1
          displayName: "Install Terraform 1.7.5"
          inputs:
            terraformVersion: '1.7.5'

        - powershell: |
            Write-Host "Spoke VNet=$(spokeVnetNameFromS2), RG=$(spokeRgNameFromS2)"
          displayName: "Echo spoke (debug)"

        - task: AzureCLI@2
          displayName: "Terraform apply (Stage4b Spoke→Hub)"
          env:
            ARM_USE_AZCLI_AUTH: 'true'
            TF_VAR_spoke_vnet_name: $(spokeVnetNameFromS2)
            TF_VAR_spoke_rg_name:   $(spokeRgNameFromS2)
          inputs:
            azureSubscription: 'snp-pipeline-api'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              az account set --subscription "$(subscriptionIdFromStage0)"
              Write-Host "Using subscription (spoke): $(subscriptionIdFromStage0)"

              if ([string]::IsNullOrWhiteSpace($env:TF_VAR_spoke_vnet_name) -or
                  [string]::IsNullOrWhiteSpace($env:TF_VAR_spoke_rg_name)) {
                Write-Error "Missing TF vars. vnet='$($env:TF_VAR_spoke_vnet_name)' rg='$($env:TF_VAR_spoke_rg_name)'"
              }

              Push-Location "$(Build.SourcesDirectory)\terraform\stage4b-peering-spoke-to-hub"
              try {
                terraform init  -no-color -input=false
                terraform plan  -no-color -input=false
                terraform apply -no-color -input=false -auto-approve
              } finally { Pop-Location }

        # 作成できたか“必ず”検証（無ければ失敗にする）
        - task: AzureCLI@2
          displayName: "Verify peering exists (spoke-to-hub)"
          inputs:
            azureSubscription: 'snp-pipeline-api'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              az account set --subscription "$(subscriptionIdFromStage0)"
              $state = az network vnet peering show `
                --resource-group "$(spokeRgNameFromS2)" `
                --vnet-name "$(spokeVnetNameFromS2)" `
                --name "spoke-to-hub" `
                --query peeringState -o tsv 2>$null
              if (-not $state) {
                Write-Error "spoke-to-hub peering not found under RG=$(spokeRgNameFromS2) VNet=$(spokeVnetNameFromS2)"
              } else {
                Write-Host "Peering 'spoke-to-hub' state: $state"
              }
