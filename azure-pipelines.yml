parameters:
- name: environment_id
  type: string
  default: dev
  values:
  - cmn
  - dev
  - stg
  - prd
- name: project_name
  type: string
  default: bft   # Functionから来れば上書きされる
- name: email
  type: string
  default: ""     # 将来拡張用。現時点は受け取りのみ。
# 追加: Function から渡る VNet Type（将来分岐用）
- name: vnet_type
  type: string
  default: private
  values:
  - private
  - public

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true
  - name: azureServiceConnection
    value: snp-pipeline-api-wif

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Simplified)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        env:
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            # 既存の Step0 スクリプトそのまま（省略）

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -input=false -auto-approve
                }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -input=false -auto-approve
                }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -input=false -auto-approve `
                  -target azurerm_network_security_group.subnet_nsg `
                  -target azurerm_subnet.subnet `
                  -target azurerm_subnet_network_security_group_association.subnet_assoc `
                  -target azurerm_subnet.bastion_subnet `
                  -target azurerm_subnet_network_security_group_association.bastion_assoc
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -input=false -auto-approve
                }
              } else {
                terraform apply -no-color -input=false -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke->Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
          TF_VAR_project_name: ${{ parameters.project_name }}
          TF_VAR_environment_id: ${{ parameters.environment_id }}
          TF_VAR_vnet_type: ${{ parameters.vnet_type }}
          TF_INPUT: 'false'
          TF_IN_AUTOMATION: 'true'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color -input=false
              terraform apply -no-color -input=false -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }