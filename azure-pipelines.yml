# subscription-api / azure-pipelines.yml
# 単一ステージ版 (Subscription -> RG -> VNet -> Subnet -> Peering)
# 修正ポイント:
#  - RG 作成ステップで存在しない helper をドットソースして失敗していた箇所を削除(安全な存在チェックへ)
#  - サブスクリプション作成/既存再利用ロジックを安定化 (create_subscription && spoke_subscription_id=="")
#  - 新規 alias 作成後は finalSpokeSubscriptionId を全ステップに注入
#  - 既存 alias の場合 overrideCreateSubscription=false で subscription リソースを評価させない
#  - Peering はフル apply (target は使用しない) + Import Guard (必要時のみ)
#  - remote_virtual_network_id は main.tf の local.effective_spoke_subscription_id で解決 (main.tf 修正と対応)
#  - RG/VNet/Subnet はオプションでターゲット apply (USE_TARGETED_APPLY=true) 失敗時フルへフォールバック
#  - 余計な helper 読み込み削除 / 安全化
#
# 前提: terraform/main.tf を本回答の修正版へ更新してください

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true   # デバッグ時のみ。安定運用は false 推奨 (フル apply)

stages:
- stage: provision_all
  displayName: Provision (Subscription -> RG -> VNet -> Subnet -> Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:

    - checkout: self

    - task: TerraformInstaller@1
      displayName: Install Terraform 1.7.5
      inputs:
        terraformVersion: 1.7.5

    - powershell: |
        Write-Host "Agent Name : $env:AGENT_NAME"
        Write-Host "Agent OS   : $env:AGENT_OS"
        Write-Host "Agent Ver  : $env:AGENT_VERSION"
      displayName: Show Agent Info

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        Write-Host "Terraform Root: $tfDir"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
        Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
      displayName: Prepare tfvars (optional copy)
      continueOnError: true

    - task: PowerShell@2
      name: prep
      displayName: Parse tfvars / set initial variables
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(tfDir)"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfVar {
            param([string]$Path,[string]$Key)
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
            if (-not $line) { return "" }
            $val = $line -replace "^\s*$Key\s*=\s*", ""
            if ($val -match "#") { $val = ($val -split "#")[0] }
            $val.Trim().Trim('"')
          }

          $createRaw = Get-TfVar $tfvars "create_subscription"
          $create = if ($createRaw -match '^(?i:true|1)$') { 'true' } else { 'false' }
          $aliasName = Get-TfVar $tfvars "subscription_alias_name"
          $spokeId   = Get-TfVar $tfvars "spoke_subscription_id"
          $hubSub    = Get-TfVar $tfvars "hub_subscription_id"

          Write-Host "Parsed: create_subscription=$create alias=$aliasName spoke_subscription_id=$spokeId hub_subscription_id=$hubSub"
          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$create"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeId"
          Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSub"

    # Step0: 新規 alias 作成 (必要時のみ)
    - task: AzureCLI@2
      name: step0
      displayName: Step0 - Ensure Subscription (alias create or lookup)
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $alias = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name missing." }
          $tfDir = "$(tfDir)"
          $targetAddress = "azapi_resource.subscription[0]"

          function GetSubId([string]$Alias) {
            if (-not $Alias) { return "" }
            foreach ($cmd in @(
              { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
              { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
            )) {
              try {
                $v = & $cmd
                if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
              } catch {}
            }
            return ""
          }

          $existing = GetSubId $alias
          if ($existing) {
            Write-Host "Alias exists (reuse): $alias => $existing"
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
            Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]true"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]false"
            exit 0
          }

          Push-Location $tfDir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            # alias リソースのみ target
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias) failed" }
          } finally { Pop-Location }

          # Poll
          $subId=""
          for($i=0;$i -lt 36 -and -not $subId;$i++){
            $subId = GetSubId $alias
            if($subId){break}
            Start-Sleep -Seconds 10
          }
          if(-not $subId){ throw "SubscriptionId not resolved within 360s (alias=$alias)" }

          Write-Host "Created subscriptionId=$subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]false"
          Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]true"

    # Step0 / 既存 ID 統合
    - task: PowerShell@2
      name: decideSub
      displayName: Decide / Normalize Subscription Flags
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromStep0 = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromStep0) { $fromStep0 } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") { throw "Subscription ID not resolved (Step0 failure?)" }
            throw "spoke_subscription_id must be set when create_subscription=false"
          }
          $aliasPreExisting = "$(step0.aliasPreExisting)"
          if (-not $aliasPreExisting) { $aliasPreExisting = "true" }   # Step0 を実行していない=既存
          $aliasCreatedNew  = "$(step0.aliasCreatedNew)"
          if (-not $aliasCreatedNew) { $aliasCreatedNew = "false" }

            # 既存 alias → create_subscription=false
          if ($aliasPreExisting -eq "true") {
            $override = "false"
          } else {
            # 新規作成した run だけ継続管理したければ true
            $override = if ("$(createSubscriptionFlag)" -eq "true" -and $aliasCreatedNew -eq "true") { "true" } else { "false" }
          }

          Write-Host "ResolvedSpokeId=$final aliasPreExisting=$aliasPreExisting aliasCreatedNew=$aliasCreatedNew override=$override"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"
          Write-Host "##vso[task.setvariable variable=overrideCreateSubscription]$override"

    - powershell: |
        Write-Host "DEBUG finalSpokeSubscriptionId=$(finalSpokeSubscriptionId)"
        Write-Host "DEBUG overrideCreateSubscription=$(overrideCreateSubscription)"
        if (-not "$(finalSpokeSubscriptionId)") { throw "finalSpokeSubscriptionId empty" }
      displayName: Debug print normalized vars

    # 共通ヘルパ (target apply ラッパー)
    - powershell: |
        function Invoke-TerraformApply {
          param(
            [string]$Dir,
            [string[]]$Targets = @(),
            [switch]$ForceFull
          )
          Push-Location $Dir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            $doTarget = ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0 -and -not $ForceFull)
            if ($doTarget) {
              $args=@("apply","-no-color","-auto-approve")
              foreach($t in $Targets){ $args += "-target=$t" }
              Write-Host "Targeted apply: $($Targets -join ', ')"
              terraform @args
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback to full apply"
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "Fallback full apply failed" }
              }
            } else {
              Write-Host "Full apply"
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
            }
          } finally { Pop-Location }
        }
        Write-Host "Helper loaded."
      displayName: Load helper function

    # Step1 RG
    - task: AzureCLI@2
      displayName: Step1 - Resource Group
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Invoke-TerraformApply -Dir "$(tfDir)" -Targets @("azurerm_resource_group.rg")

    # Step2 VNet
    - task: AzureCLI@2
      displayName: Step2 - VNet
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Invoke-TerraformApply -Dir "$(tfDir)" -Targets @("azurerm_virtual_network.vnet")

    # Step3 Subnet + NSG
    - task: AzureCLI@2
      displayName: Step3 - Subnet + NSG
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Invoke-TerraformApply -Dir "$(tfDir)" -Targets @(
            "azurerm_network_security_group.subnet_nsg",
            "azurerm_subnet.subnet",
            "azurerm_subnet_network_security_group_association.subnet_assoc"
          )

    # Step4a Hub->Spoke (Import Guard)
    - task: AzureCLI@2
      displayName: Step4a - Peering Hub->Spoke
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $hubSub = "$(hubSubscriptionId)"
          if (-not $hubSub) { throw "hub_subscription_id not parsed." }
          az account set --subscription $hubSub
          Write-Host "Hub context: $hubSub"
          $tfDir = "$(tfDir)"

          if ($env:TF_VAR_create_subscription -eq "true") {
            Push-Location $tfDir
            try {
              terraform init -no-color
              terraform state show azapi_resource.subscription[0] 2>$null | Out-Null
              if (-not $?) {
                $alias = "$(aliasName)"
                if ($alias) {
                  $rid = "/providers/Microsoft.Subscription/aliases/$alias"
                  Write-Host "Subscription alias missing in state; importing $rid"
                  terraform import -no-color azapi_resource.subscription[0] $rid 2>$null
                  if ($LASTEXITCODE -ne 0) {
                    Write-Warning "Import failed (continuing)."
                  }
                }
              } else {
                Write-Host "Alias already in state."
              }
            } finally { Pop-Location }
          }

          # Peering はフル apply (依存解決のため)
          Push-Location $tfDir
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
            if ($LASTEXITCODE -ne 0) { throw "Peering hub->spoke apply failed" }
          } finally { Pop-Location }

    # Step4b Spoke->Hub
    - task: AzureCLI@2
      displayName: Step4b - Peering Spoke->Hub
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform init -no-color
            terraform apply -no-color -auto-approve
            if ($LASTEXITCODE -ne 0) { throw "Peering spoke->hub apply failed" }
          } finally { Pop-Location }

    # Verify Peering
    - task: AzureCLI@2
      displayName: Verify Peering (spoke-to-hub)
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          terraform -chdir="$tfDir" init -no-color | Out-Null
          $planJson = terraform -chdir="$tfDir" show -json
          if (-not $planJson) { throw "terraform show -json failed." }
          $obj = $planJson | ConvertFrom-Json
          $vnet = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
          if (-not $vnet) { throw "VNet not found in state." }
          $rg  = $vnet.values.resource_group_name
          $vn  = $vnet.values.name
          $state = az network vnet peering show `
            --resource-group $rg `
            --vnet-name $vn `
            --name "spoke-to-hub" `
            --query peeringState -o tsv 2>$null
          if (-not $state) { throw "Peering 'spoke-to-hub' not found (RG=$rg VNet=$vn)" }
          Write-Host "Peering 'spoke-to-hub' state: $state"

    # Optional: Convergence Plan
    - task: AzureCLI@2
      displayName: Convergence Plan (Optional)
      continueOnError: true
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          terraform -chdir="$(tfDir)" init -no-color | Out-Null
          terraform -chdir="$(tfDir)" plan -no-color