# subscription-api / azure-pipelines.yml
# 一貫方針:
#  1) create_subscription=true かつ spoke_subscription_id="" の場合のみ Step0 で Alias(Subscription) を作成
#  2) 既存 (create_subscription=false あるいは spoke_subscription_id 指定) は Step0 をスキップ
#  3) Step0 後に必ず finalSpokeSubscriptionId を決定し、以後すべての Terraform に
#       TF_VAR_spoke_subscription_id=finalSpokeSubscriptionId を注入
#  4) 既存 Alias の場合は overrideCreateSubscription=false とし、subscription リソース count=0 で再作成を防止
#     新規 Alias の場合は overrideCreateSubscription=true のまま (state で管理継続)
#  5) Peering (Hub→Spoke / Spoke→Hub) 前に “Import Guard” を入れ、state に alias が無いのに
#     create_subscription=true (count=1) でリソースが無再現 → create 再試行 → “Resource already exists” を防止
#  6) remote_virtual_network_id は main.tf 内で local.effective_spoke_subscription_id を利用 (main.tf 修正)
#  7) 任意: 最後に Convergence (Full Apply) Step を追加して差分が無いことを検証
#
# 注意:
#  - main.tf 側で azapi_resource.subscription と data.azapi_resource.subscription_get は
#    local.need_create_subscription = (var.create_subscription && var.spoke_subscription_id == "")
#    に基づく count 条件へ変更済み（本回答の main.tf 参照）
#  - Hub 関連 (hub_subscription_id 等) は tfvars で供給される前提
#  - Windows エージェント上でローカル state を共有 (単一 Job)。将来はリモート backend 推奨。

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true             # デバッグ用。false で常にフル apply

stages:
- stage: provision_all
  displayName: Provision (Subscription -> RG -> VNet -> Subnet -> Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration (Monolithic Root)
    steps:

    - checkout: self

    - task: TerraformInstaller@1
      displayName: Install Terraform 1.7.5
      inputs:
        terraformVersion: 1.7.5

    - powershell: |
        Write-Host "Agent Name : $env:AGENT_NAME"
        Write-Host "Agent OS   : $env:AGENT_OS"
        Write-Host "Agent Ver  : $env:AGENT_VERSION"
      displayName: Show Agent Info

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        Write-Host "Terraform Root: $tfDir"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
        Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
      displayName: Prepare tfvars (optional copy)
      continueOnError: true

    - task: PowerShell@2
      name: prep
      displayName: Parse tfvars / set initial variables
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(tfDir)"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfVar {
            param([string]$Path,[string]$Key)
            $line = Get-Content -LiteralPath $Path |
              Where-Object { $_ -match "^\s*$Key\s*=" } |
              Select-Object -First 1
            if (-not $line) { return "" }
            $val = $line -replace "^\s*$Key\s*=\s*", ""
            if ($val -match "#") { $val = ($val -split "#")[0] }
            $val.Trim().Trim('"')
          }

          $createRaw = Get-TfVar $tfvars "create_subscription"
          $create = if ($createRaw -match '^(?i:true|1)$') { 'true' } else { 'false' }
          $aliasName = Get-TfVar $tfvars "subscription_alias_name"
          $spokeId   = Get-TfVar $tfvars "spoke_subscription_id"
          $hubSub    = Get-TfVar $tfvars "hub_subscription_id"

          Write-Host "Parsed: create_subscription=$create alias=$aliasName spoke_subscription_id=$spokeId hub_subscription_id=$hubSub"
          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$create"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeId"
          Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSub"

    # Step0 (必要なら alias 作成)
    - task: AzureCLI@2
      name: step0
      displayName: Step0 - Ensure Subscription (alias create or lookup)
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $alias = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name missing." }
          $tfDir = "$(tfDir)"
          $targetAddress = "azapi_resource.subscription[0]"
          $aliasRid = "/providers/Microsoft.Subscription/aliases/$alias"

          function GetSubId([string]$Alias) {
            if (-not $Alias) { return "" }
            foreach ($cmd in @(
              { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
              { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
            )) {
              try {
                $v = & $cmd
                if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
              } catch {}
            }
            return ""
          }

          $existing = GetSubId $alias
          if ($existing) {
            Write-Host "Alias already exists (skip creation). alias=$alias subId=$existing"
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
            Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]true"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]false"
            exit 0
          }

          Write-Host "Creating alias: $alias"
          Push-Location $tfDir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias) failed" }
          } finally { Pop-Location }

          # Poll for subscription ID
          $subId=""
          for($i=0;$i -lt 36 -and -not $subId;$i++){
            $subId = GetSubId $alias
            if($subId){break}
            Start-Sleep -Seconds 10
          }
          if(-not $subId){ throw "SubscriptionId not resolved within 360s" }

          Write-Host "Created subscriptionId=$subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          Write-Host "##vso[task.setvariable variable=aliasPreExisting;isOutput=true]false"
          Write-Host "##vso[task.setvariable variable=aliasCreatedNew;isOutput=true]true"

    # ID 正規化
    - task: PowerShell@2
      name: decideSub
      displayName: Decide / Normalize Subscription Flags
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $fromStep0 = "$(step0.spokeSubscriptionId)"
          $fromTfvars = "$(spokeSubIdFromTfvars)"
          $final = if ($fromStep0) { $fromStep0 } else { $fromTfvars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") { throw "Subscription ID not resolved (Step0 failure?)" }
            throw "spoke_subscription_id required when create_subscription=false"
          }
          $aliasPreExisting = "$(step0.aliasPreExisting)"
          if (-not $aliasPreExisting) { $aliasPreExisting = "true" }
          $aliasCreatedNew  = "$(step0.aliasCreatedNew)"
          if (-not $aliasCreatedNew) { $aliasCreatedNew = "false" }

          if ($aliasPreExisting -eq "true") {
            $override = "false"
          } else {
            $override = if ("$(createSubscriptionFlag)" -eq "true" -and $aliasCreatedNew -eq "true") { "true" } else { "false" }
          }

          Write-Host "Resolved Spoke Subscription ID: $final"
          Write-Host "aliasPreExisting=$aliasPreExisting aliasCreatedNew=$aliasCreatedNew overrideCreateSubscription=$override"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"
          Write-Host "##vso[task.setvariable variable=overrideCreateSubscription]$override"

    - powershell: |
        Write-Host "DEBUG finalSpokeSubscriptionId=$(finalSpokeSubscriptionId)"
        Write-Host "DEBUG overrideCreateSubscription=$(overrideCreateSubscription)"
        if (-not "$(finalSpokeSubscriptionId)") { throw "finalSpokeSubscriptionId empty" }
      displayName: Debug print normalized vars

    # 共通ヘルパ関数ロード
    - powershell: |
        function Invoke-TerraformStep {
          param([string]$Dir,[string[]]$Targets,[switch]$DisableTargeting)
          Push-Location $Dir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            $targetMode = ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0 -and -not $DisableTargeting)
            if ($targetMode) {
              $args=@("apply","-no-color","-auto-approve")
              foreach($t in $Targets){ $args += "-target=$t" }
              Write-Host "Targeted apply: $($Targets -join ', ')"
              terraform @args
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed; fallback to full apply"
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "Fallback full apply failed" }
              }
            } else {
              Write-Host "Full apply (targeting disabled)"
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
            }
          } finally { Pop-Location }
        }
        Write-Host "Helper loaded."
      displayName: Load helper function

    # Step1 RG
    - task: AzureCLI@2
      displayName: Step1 - Resource Group
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          . "$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/azure-pipelines-helper.ps1" 2>$null | Out-Null
          # 上の helper 読み込みは失敗しても継続 (任意ファイル想定)
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target=azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Target apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir "$(tfDir)" -Targets @("azurerm_resource_group.rg")

    # Step2 VNet
    - task: AzureCLI@2
      displayName: Step2 - VNet
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          function Invoke-TerraformStep { param([string]$Dir)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target=azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Target failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir "$(tfDir)"

    # Step3 Subnet + NSG
    - task: AzureCLI@2
      displayName: Step3 - Subnet + NSG
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          function Invoke-TerraformStep { param([string]$Dir)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve `
                  -target=azurerm_network_security_group.subnet_nsg `
                  -target=azurerm_subnet.subnet `
                  -target=azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Target failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "apply failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir "$(tfDir)"

    # Step4a Hub -> Spoke (Import Guard)
    - task: AzureCLI@2
      displayName: Step4a - Peering Hub->Spoke
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $hubSub = "$(hubSubscriptionId)"
          if (-not $hubSub) { throw "hub_subscription_id not parsed." }
          az account set --subscription $hubSub
          Write-Host "CLI context (Hub): $hubSub"
          $tfDir = "$(tfDir)"

          # Import Guard (create_subscription=true の場合 state に alias が無ければ import)
          if ($env:TF_VAR_create_subscription -eq "true") {
            Push-Location $tfDir
            try {
              terraform init -no-color
              $stateCheck = terraform state show azapi_resource.subscription[0] 2>$null
              if (-not $?) {
                Write-Host "Subscription alias not in state: attempting import"
                $alias = "$(aliasName)"
                if ($alias) {
                  terraform import -no-color azapi_resource.subscription[0] "/providers/Microsoft.Subscription/aliases/$alias" 2>$null
                  if ($LASTEXITCODE -ne 0) {
                    Write-Warning "Import failed or alias not required (continuing)."
                  } else {
                    Write-Host "Import success."
                  }
                }
              } else {
                Write-Host "Alias already in state."
              }
            } finally { Pop-Location }
          }

          function Invoke-TerraformStep { param([string]$Dir)
            Push-Location $Dir; try {
              terraform init -no-color
              # Peering は依存解決が複合的なので target を避け、常にフル適用推奨
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "apply failed" }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir

    # Step4b Spoke -> Hub
    - task: AzureCLI@2
      displayName: Step4b - Peering Spoke->Hub
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          Write-Host "CLI context (Spoke): $(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir)
            Push-Location $Dir; try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "apply failed" }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir

    # Verify
    - task: AzureCLI@2
      displayName: Verify Peering (spoke-to-hub)
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform init -no-color | Out-Null
            terraform show -json | Out-File tfstate.json -Encoding UTF8
          } finally { Pop-Location }
          $stateObj = Get-Content "$tfDir\tfstate.json" -Raw | ConvertFrom-Json
          $vnetRes = $stateObj.values.root_module.resources |
            Where-Object { $_.type -eq "azurerm_virtual_network" } |
            Select-Object -First 1
          if (-not $vnetRes) { throw "No VNet resource in state for verification." }
          $vnetName = $vnetRes.values.name
          $rgName   = $vnetRes.values.resource_group_name
          $status = az network vnet peering show `
            --resource-group $rgName `
            --vnet-name $vnetName `
            --name "spoke-to-hub" `
            --query peeringState -o tsv 2>$null
          if (-not $status) { throw "Peering 'spoke-to-hub' not found (RG=$rgName VNet=$vnetName)" }
          Write-Host "Peering 'spoke-to-hub' state: $status (OK)"

    # Optional: 最終収束確認 (差分なしであること)
    - task: AzureCLI@2
      displayName: Convergence Plan (Optional)
      continueOnError: true
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
        TF_VAR_create_subscription: $(overrideCreateSubscription)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription "$(finalSpokeSubscriptionId)"
          terraform -chdir="$(tfDir)" init -no-color | Out-Null
          terraform -chdir="$(tfDir)" plan -no-color