trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true
  - name: TF_IN_AUTOMATION
    value: true

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Local state, clean init each step)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # 共通: Terraform ワークディレクトリ
      - task: PowerShell@2
        displayName: Set TF dir variable
        inputs:
          targetType: inline
          script: |
            $tfDir = "$(Build.SourcesDirectory)/terraform"
            if (-not (Test-Path $tfDir)) { throw "Terraform dir not found: $tfDir" }
            Write-Host "##vso[task.setvariable variable=TF_DIR]$tfDir"

      # util: その場で .terraform と .terraform.lock.hcl を掃除
      - task: PowerShell@2
        displayName: Define Clean-TF function
        inputs:
          targetType: inline
          script: |
            function Clean-TF {
              param([string]$Dir)
              $td = Join-Path $Dir ".terraform"
              $lk = Join-Path $Dir ".terraform.lock.hcl"
              if (Test-Path $td) { Write-Host "Remove $td"; Remove-Item -Recurse -Force $td }
              if (Test-Path $lk) { Write-Host "Remove $lk"; Remove-Item -Force $lk }
            }
            Set-Alias -Name CleanTF -Value Clean-TF
            Write-Host "##vso[task.setvariable variable=HasCleanFunc]true"

      # Step0: Subscription（create or reuse）
      # alias 未指定でも命名5変数から自動算出して作成/再利用できるように修正
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Clean-TF { param([string]$Dir)
              $td = Join-Path $Dir ".terraform"; $lk = Join-Path $Dir ".terraform.lock.hcl"
              if (Test-Path $td) { Remove-Item -Recurse -Force $td }
              if (Test-Path $lk) { Remove-Item -Force $lk }
            }
            function Slugify([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim().ToLower()
              $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
              return $t
            }
            function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
              $p1 = Slugify $project
              $p2raw = Slugify $purpose
              # 「検証」の場合は "kensho" にフォールバック（main.tf と同等）
              $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
              $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
              return ($parts -join "-")
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            $aliasName   = Get-TfVar $tfvars "subscription_alias_name"
            $dispName    = Get-TfVar $tfvars "subscription_display_name"
            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

            # 未指定なら base から alias/display を自動算出（Terraform と同じ規則）
            if (-not $aliasName -or -not $dispName) {
              $project = Get-TfVar $tfvars "project_name"
              $purpose = Get-TfVar $tfvars "purpose_name"
              $envId   = Get-TfVar $tfvars "environment_id"
              $rCode   = Get-TfVar $tfvars "region_code"
              $seq     = Get-TfVar $tfvars "sequence"
              $base    = Build-Base $project $purpose $envId $rCode $seq
              if (-not $aliasName -and $base) { $aliasName = "sub-$base" }
              if (-not $dispName  -and $base) { $dispName  = "sub-$base" }
            }

            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) { try { $v = & $cmd; if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() } } catch {} }
              return ""
            }

            $finalSubId = ""
            $aliasCreatedNew = "false"

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須" }
              $finalSubId = $spokeIdInTf
            } else {
              if ($spokeIdInTf) {
                Write-Warning "create_subscription=true ですが spoke_subscription_id が指定されています。既存IDを優先します。"
                $finalSubId = $spokeIdInTf
              } else {
                # 既存 alias が同名で存在すれば再利用
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  $finalSubId = $reuseId
                } else {
                  if (-not $aliasName) {
                    throw "alias を自動算出できませんでした。tfvars の命名入力（project_name/purpose_name/environment_id/region_code/sequence）を確認してください。"
                  }
                  # Terraform で alias を作成
                  Clean-TF $tfDir
                  terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
                  if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step0)" }

                  # display/alias 名を -var で注入（tfvars 未記載でも値を渡す）
                  $vars = @()
                  if ($aliasName) { $vars += "-var"; $vars += "subscription_alias_name=$aliasName" }
                  if ($dispName)  { $vars += "-var"; $vars += "subscription_display_name=$dispName"  }

                  terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve -target azapi_resource.subscription[0] @vars
                  if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }

                  # 作成結果の取得（output → fallback で REST 確認）
                  $subOut = terraform -chdir="$tfDir" output -raw subscription_id 2>$null
                  if ($LASTEXITCODE -ne 0 -or -not $subOut) { $subOut = Get-SubscriptionIdFromAlias $aliasName }
                  if (-not $subOut) { throw "Could not resolve subscription id after creation." }
                  $finalSubId = $subOut.Trim()
                  $aliasCreatedNew = "true"

                  # alias リソースは state から外す（以降は既存再利用運用）
                  terraform -chdir="$tfDir" state show azapi_resource.subscription[0] 1>$null 2>$null
                  if ($LASTEXITCODE -eq 0) {
                    terraform -chdir="$tfDir" state rm azapi_resource.subscription[0] | Out-Null
                  }

                  # 次回以降のために override を書き出し
                  @(
                    'create_subscription = false'
                    'spoke_subscription_id = "' + $finalSubId + '"'
                  ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")

                  # ARM/az への伝播待ち
                  $ok = $false
                  for($i=1;$i -le 24;$i++){
                    try { az rest --method get --url "https://management.azure.com/subscriptions/$finalSubId?api-version=2020-01-01" | Out-Null; $ok=$true; break } catch { Start-Sleep -Seconds 10 }
                  }
                  if (-not $ok) { throw "Subscription not visible in ARM after retries: $finalSubId" }

                  $seen = $false
                  for($i=1;$i -le 40;$i++){
                    $hit = az account list --refresh --query "[?id=='$finalSubId']" -o tsv
                    if ($hit) { $seen=$true; break }
                    Start-Sleep -Seconds 15
                  }
                  if (-not $seen) { Write-Warning "Subscription not listed by 'az account list' yet: $finalSubId" }
                }
              }
            }

            if (-not $finalSubId) { throw "final subscription id could not be resolved." }
            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew]$aliasCreatedNew"
            Write-Host "Resolved finalSpokeSubscriptionId=$finalSubId (aliasCreatedNew=$aliasCreatedNew)"

      # 名前の計算（tfvars に直書きが無い場合の補完）
      - task: PowerShell@2
        displayName: Compute resource names (for import/check)
        inputs:
          targetType: inline
          script: |
            $tfDir = "$(TF_DIR)"
            $tfvars = Join-Path $tfDir "terraform.tfvars"

            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { return "" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }
            function Slugify([string]$s) {
              if (-not $s) { return "" }
              $t = $s.Trim().ToLower()
              $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
              return $t
            }
            function Build-Base([string]$project,[string]$purpose,[string]$env,[string]$regionCode,[string]$seq) {
              $p1 = Slugify $project
              $p2raw = Slugify $purpose
              $p2 = if ($purpose -eq "検証") { "kensho" } elseif ($p2raw) { $p2raw } else { $p2raw }
              $parts = @($p1,$p2,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
              return ($parts -join "-")
            }

            $rgName   = Get-TfVar $tfvars "rg_name"
            $vnetName = Get-TfVar $tfvars "vnet_name"
            $subnet   = Get-TfVar $tfvars "subnet_name"
            $nsg      = Get-TfVar $tfvars "nsg_name"

            if (-not $rgName -or -not $vnetName -or -not $subnet -or -not $nsg) {
              $project    = Get-TfVar $tfvars 'project_name'
              $purpose    = Get-TfVar $tfvars 'purpose_name'
              $envId      = Get-TfVar $tfvars 'environment_id'
              $regionCode = Get-TfVar $tfvars 'region_code'
              $seq        = Get-TfVar $tfvars 'sequence'
              $base       = Build-Base $project $purpose $envId $regionCode $seq
              if (-not $rgName)   { $rgName   = "rg-$base" }
              if (-not $vnetName) { $vnetName = "vnet-$base" }
              if (-not $subnet)   { $subnet   = "snet-$base" }
              if (-not $nsg)      { $nsg      = "nsg-$base" }
            }

            Write-Host "##vso[task.setvariable variable=ComputedRgName]$rgName"
            Write-Host "##vso[task.setvariable variable=ComputedVnetName]$vnetName"
            Write-Host "##vso[task.setvariable variable=ComputedSubnetName]$subnet"
            Write-Host "##vso[task.setvariable variable=ComputedNsgName]$nsg"
            Write-Host "Computed: RG=$rgName, VNET=$vnetName, Subnet=$subnet, NSG=$nsg"

      # Step1: RG（既存なら import → apply）
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"
            az account set --subscription "$(finalSpokeSubscriptionId)"

            $rgName = "$(ComputedRgName)"
            $rgId = "/subscriptions/$(finalSpokeSubscriptionId)/resourceGroups/$rgName"
            Write-Host "RG target: $rgName"

            # Clean and init (local backend)
            if (Test-Path (Join-Path $tfDir ".terraform")) { Remove-Item -Recurse -Force (Join-Path $tfDir ".terraform") }
            if (Test-Path (Join-Path $tfDir ".terraform.lock.hcl")) { Remove-Item -Force (Join-Path $tfDir ".terraform.lock.hcl") }
            terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step1)" }

            # Import RG if exists but not in state
            $exists  = (az group exists -n $rgName)
            $inState = terraform -chdir="$tfDir" state list 2>$null | Select-String -SimpleMatch "azurerm_resource_group.rg"
            if ($exists -eq 'true' -and -not $inState) {
              Write-Host "Import RG: $rgId"
              terraform -chdir="$tfDir" import -no-color azurerm_resource_group.rg $rgId
              if ($LASTEXITCODE -ne 0) { throw "terraform import (RG) failed" }
            }

            if ("$(USE_TARGETED_APPLY)" -eq "true") {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve -target azurerm_resource_group.rg
              if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve }
            } else {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve
            }
            if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"
            az account set --subscription "$(finalSpokeSubscriptionId)"

            if (Test-Path (Join-Path $tfDir ".terraform")) { Remove-Item -Recurse -Force (Join-Path $tfDir ".terraform") }
            if (Test-Path (Join-Path $tfDir ".terraform.lock.hcl")) { Remove-Item -Force (Join-Path $tfDir ".terraform.lock.hcl") }
            terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step2)" }

            if ("$(USE_TARGETED_APPLY)" -eq "true") {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve -target azurerm_virtual_network.vnet
              if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve }
            } else {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve
            }
            if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"
            az account set --subscription "$(finalSpokeSubscriptionId)"

            if (Test-Path (Join-Path $tfDir ".terraform")) { Remove-Item -Recurse -Force (Join-Path $tfDir ".terraform") }
            if (Test-Path (Join-Path $tfDir ".terraform.lock.hcl")) { Remove-Item -Force (Join-Path $tfDir ".terraform.lock.hcl") }
            terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step3)" }

            if ("$(USE_TARGETED_APPLY)" -eq "true") {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve `
                -target azurerm_network_security_group.subnet_nsg `
                -target azurerm_subnet.subnet `
                -target azurerm_subnet_network_security_group_association.subnet_assoc
              if ($LASTEXITCODE -ne 0) { Write-Warning "Targeted apply failed; fallback full apply"; terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve }
            } else {
              terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve
            }
            if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }

      # Step4a: Peering Hub -> Spoke
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub

            if (Test-Path (Join-Path $tfDir ".terraform")) { Remove-Item -Recurse -Force (Join-Path $tfDir ".terraform") }
            if (Test-Path (Join-Path $tfDir ".terraform.lock.hcl")) { Remove-Item -Force (Join-Path $tfDir ".terraform.lock.hcl") }
            terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step4a)" }

            terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve
            if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }

      # Step4b: Peering Spoke -> Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: snp-pipeline-api-wif
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $tfDir = "$(TF_DIR)"
            az account set --subscription "$(finalSpokeSubscriptionId)"

            if (Test-Path (Join-Path $tfDir ".terraform")) { Remove-Item -Recurse -Force (Join-Path $tfDir ".terraform") }
            if (Test-Path (Join-Path $tfDir ".terraform.lock.hcl")) { Remove-Item -Force (Join-Path $tfDir ".terraform.lock.hcl") }
            terraform -chdir="$tfDir" init -no-color -input=false -backend=false -reconfigure
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed (Step4b)" }

            terraform -chdir="$tfDir" apply -no-color -input=false -auto-approve
            if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }