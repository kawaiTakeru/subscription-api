# subscription-api / azure-pipelines.yml
trigger: none
pr: none

pool:
  name: Default

variables:
  - name: System.Debug
    value: 'true'

stages:
# =========================================================
# Stage0: Subscription (Create via AzAPI)
# =========================================================
- stage: stage0_subscription
  displayName: "Stage0 - Create Subscription (AzAPI)"
  jobs:
  - job: run_tf
    displayName: "Terraform apply (subscription)"
    steps:
    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: "Show Agent Info"

    - task: AzureCLI@2
      displayName: "WHOAMI (service connection identity)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $clientId = az account show --query user.name -o tsv
          $tenantId = az account show --query tenantId -o tsv
          $subName  = az account show --query name -o tsv
          $subId    = az account show --query id -o tsv

          $sp      = az ad sp show --id $clientId --only-show-errors
          $spJson  = $sp | ConvertFrom-Json
          $spObjId = $spJson.id
          $spName  = $spJson.displayName

          Write-Host "== Service Connection =="
          Write-Host "tenantId    : $tenantId"
          Write-Host "subscription: $subName ($subId)"
          Write-Host "clientId    : $clientId"
          Write-Host "spObjectId  : $spObjId"
          Write-Host "spName      : $spName"
          Write-Host ""
          Write-Host "== Current role assignments for this SP (all scopes) =="
          az role assignment list --assignee $spObjId --all -o table

    - task: AzureCLI@2
      name: tf
      displayName: "Terraform init/plan/apply (Stage0)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $stageDir = "$(Build.SourcesDirectory)\terraform\stage0-subscription"
          $tfvars   = "$(Build.SourcesDirectory)\terraform\stage0-subscription\terraform.tfvars"

          function Get-AliasNameFromTfvars([string]$Path) {
            if (-not (Test-Path -LiteralPath $Path)) { return "" }
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match '^\s*subscription_alias_name\s*=' } | Select-Object -First 1
            if ($line) { return ($line -replace '^\s*subscription_alias_name\s*=\s*"?([^"]+)"?\s*$', '$1') }
            return ""
          }

          function Get-SubIdViaAz([string]$AliasName) {
            if ([string]::IsNullOrWhiteSpace($AliasName)) { return "" }
            try {
              $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            try {
              $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
              $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
              if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
            } catch {}
            return ""
          }

          function Wait-SubscriptionReady([string]$AliasName, [int]$MaxSeconds, [int]$IntervalSeconds) {
            $deadline = (Get-Date).AddSeconds($MaxSeconds)
            while ((Get-Date) -lt $deadline) {
              $id = ""
              try {
                $id = az account alias show --name $AliasName --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              try {
                $rid = "/providers/Microsoft.Subscription/aliases/$AliasName"
                $id = az resource show --ids $rid --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $id) { return $id.Trim() }
              } catch {}
              Start-Sleep -Seconds $IntervalSeconds
            }
            return ""
          }

          if (-not (Test-Path -LiteralPath $tfvars)) {
            throw ("terraform.tfvars not found: " + $tfvars)
          }

          $aliasName = Get-AliasNameFromTfvars -Path $tfvars
          if ([string]::IsNullOrWhiteSpace($aliasName)) {
            throw "subscription_alias_name is empty in tfvars. Set it first."
          }

          # 出力変数
          Write-Host "##vso[task.setvariable variable=subscriptionAlias;isOutput=true]$aliasName"

          # 既存 alias チェック
          $existingSubId = Get-SubIdViaAz -AliasName $aliasName
          if ($existingSubId) {
            Write-Host "Alias already exists. Skip Terraform. alias=$aliasName subId=$existingSubId"

            try {
              Set-Location $stageDir
              terraform init
              $rid = "/providers/Microsoft.Subscription/aliases/$aliasName"
              terraform import -no-color azapi_resource.subscription $rid 2>$null
              if ($LASTEXITCODE -ne 0) { Write-Host "terraform import skipped (not critical)." }
            } catch {
              Write-Host "terraform import failed but ignored."
            } finally {
              Set-Location "$(Build.SourcesDirectory)"
            }

            Write-Host "subscriptionId=$existingSubId"
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]$existingSubId"
            return
          }

          # 新規作成
          $orig = Get-Location
          try {
            Set-Location $stageDir
            terraform init
            terraform plan -var-file="$tfvars" -out plan.out
            terraform apply -auto-approve plan.out
          } finally {
            Set-Location $orig
          }

          # output or wait
          $subId = ""
          try { $subId = terraform -chdir="$stageDir" output -raw subscription_id } catch {}
          if (-not $subId) {
            $subId = Wait-SubscriptionReady -AliasName $aliasName -MaxSeconds 360 -IntervalSeconds 10
          }

          if ($subId) {
            Write-Host "subscriptionId=$subId"
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]$subId"
          } else {
            Write-Warning "subscriptionId not resolved in Stage0 (alias may still be provisioning)."
            Write-Host "##vso[task.setvariable variable=subscriptionId;isOutput=true]"
          }

# =========================================================
# Stage1: Resource Group
# =========================================================
- stage: stage1_rg
  displayName: "Stage1 - Resource Group"
  dependsOn: stage0_subscription
  condition: succeeded('stage0_subscription')
  jobs:
  - job: apply_rg
    displayName: "RG作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
      subscriptionAlias:        $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionAlias'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        $sub = "$(subscriptionIdFromStage0)"
        if ([string]::IsNullOrWhiteSpace($sub)) { throw "subscriptionIdFromStage0 is empty" }
        Write-Host "subscriptionIdFromStage0=$sub"
        Write-Host "subscriptionAlias=$(subscriptionAlias)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage1 RG)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage1-rg"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage2: VNet
# =========================================================
- stage: stage2_vnet
  displayName: "Stage2 - VNet"
  dependsOn:
  - stage0_subscription
  - stage1_rg
  condition: and(succeeded('stage1_rg'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_vnet
    displayName: "VNet作成"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage2 VNet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

    - task: AzureCLI@2
      name: resolve
      displayName: "Export Spoke VNet/RG to output variables"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          $dir = "$(Build.SourcesDirectory)\terraform\stage2-vnet"
          Push-Location $dir
          try {
            terraform init -no-color -input=false | Out-Null
            $json = terraform show -json
          } finally { Pop-Location }

          if (-not $json) { throw "terraform show -json returned empty." }
          $obj = $json | ConvertFrom-Json
          $vnet = $obj.values.root_module.resources | Where-Object { $_.type -eq "azurerm_virtual_network" } | Select-Object -First 1
          if (-not $vnet) { throw "No azurerm_virtual_network found in Stage2 state." }

          $spokeVnetName = $vnet.values.name
          $spokeRgName   = $vnet.values.resource_group_name

          if ([string]::IsNullOrWhiteSpace($spokeVnetName) -or [string]::IsNullOrWhiteSpace($spokeRgName)) {
            throw "Failed to resolve Spoke VNet/RG."
          }

          Write-Host "Resolved Spoke: VNet=$spokeVnetName, RG=$spokeRgName"
          Write-Host "##vso[task.setvariable variable=spokeVnetName;isOutput=true]$spokeVnetName"
          Write-Host "##vso[task.setvariable variable=spokeRgName;isOutput=true]$spokeRgName"

# =========================================================
# Stage3: Subnet + NSG + 関連付け
# =========================================================
- stage: stage3_subnet
  displayName: "Stage3 - Subnet"
  dependsOn:
  - stage0_subscription
  - stage2_vnet
  condition: and(succeeded('stage2_vnet'), succeeded('stage0_subscription'))
  jobs:
  - job: apply_subnet
    displayName: "Subnet + NSG + 関連付け"
    variables:
      subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
    condition: and(succeeded(), ne(variables['subscriptionIdFromStage0'], ''))
    steps:
    - powershell: |
        Write-Host "subscriptionIdFromStage0=$(subscriptionIdFromStage0)"
      displayName: "Echo subId (debug)"

    - task: AzureCLI@2
      displayName: "Terraform apply (Stage3 Subnet)"
      inputs:
        azureSubscription: 'snp-pipeline-api'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = 'Stop'
          az account set --subscription "$(subscriptionIdFromStage0)"
          Write-Host "Using subscription: $(subscriptionIdFromStage0)"
          $env:ARM_USE_AZCLI_AUTH = "true"
          Push-Location "$(Build.SourcesDirectory)\terraform\stage3-subnet"
          try {
            terraform init -no-color
            terraform apply -auto-approve -no-color
          } finally { Pop-Location }

# =========================================================
# Stage4a: Hub -> Spoke  （先に Hub 側）
# =========================================================
- stage: stage4a_peering_hub_to_spoke
  displayName: "Stage4a - Peering Hub → Spoke"
  dependsOn:
    - stage2_vnet
    - stage0_subscription   # 追加：Stage0 を直接参照
  condition: succeeded('stage2_vnet')
  jobs:
    - job: peering_hub_to_spoke
      displayName: "Hub → Spoke ピアリング作成"
      variables:
        # Stage0: Spoke サブスクリプション ID
        spokeSubIdFromS0:   $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
        # Stage2: Spoke の VNet/RG 名
        spokeVnetNameFromS2: $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeVnetName'] ]
        spokeRgNameFromS2:   $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeRgName'] ]
      condition: and(succeeded(),
                     ne(variables['spokeSubIdFromS0'], ''),
                     ne(variables['spokeVnetNameFromS2'], ''),
                     ne(variables['spokeRgNameFromS2'], ''))
      steps:
        - powershell: |
            Write-Host "Spoke: sub=$(spokeSubIdFromS0) vnet=$(spokeVnetNameFromS2) rg=$(spokeRgNameFromS2)"
          displayName: "Echo spoke (debug)"

        - task: AzureCLI@2
          displayName: "Terraform apply (Stage4a Hub→Spoke)"
          inputs:
            azureSubscription: 'snp-pipeline-api'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              $hubSub = "7d1f78e5-bc6c-4018-847f-336ff47b9436"
              az account set --subscription $hubSub
              Write-Host "Using subscription (hub): $hubSub"

              $env:ARM_USE_AZCLI_AUTH = "true"

              # Hub の固定値は terraform/stage4a.../terraform.tfvars に配置済み
              # Spoke 情報のみ TF_VAR で注入
              $env:TF_VAR_spoke_subscription_id = "$(spokeSubIdFromS0)"
              $env:TF_VAR_spoke_vnet_name       = "$(spokeVnetNameFromS2)"
              $env:TF_VAR_spoke_rg_name         = "$(spokeRgNameFromS2)"

              Push-Location "$(Build.SourcesDirectory)\terraform\stage4a-peering-hub-to-spoke"
              try {
                terraform init -no-color
                terraform apply -auto-approve -no-color
              } finally { Pop-Location }

# =========================================================
# Stage4b: Spoke -> Hub  （後で Spoke 側）
# =========================================================
- stage: stage4b_peering_spoke_to_hub
  displayName: "Stage4b - Peering Spoke → Hub"
  dependsOn:
    - stage4a_peering_hub_to_spoke
  condition: succeeded('stage4a_peering_hub_to_spoke')
  jobs:
    - job: peering_spoke_to_hub
      displayName: "Spoke → Hub ピアリング作成"
      variables:
        subscriptionIdFromStage0: $[ stageDependencies.stage0_subscription.run_tf.outputs['tf.subscriptionId'] ]
        spokeVnetNameFromS2:      $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeVnetName'] ]
        spokeRgNameFromS2:        $[ stageDependencies.stage2_vnet.apply_vnet.outputs['resolve.spokeRgName'] ]
      condition: and(succeeded(),
                     ne(variables['subscriptionIdFromStage0'], ''),
                     ne(variables['spokeVnetNameFromS2'], ''),
                     ne(variables['spokeRgNameFromS2'], ''))
      steps:
        - powershell: |
            Write-Host "Spoke VNet=$(spokeVnetNameFromS2), RG=$(spokeRgNameFromS2)"
          displayName: "Echo spoke (debug)"

        - task: AzureCLI@2
          displayName: "Terraform apply (Stage4b Spoke→Hub)"
          inputs:
            azureSubscription: 'snp-pipeline-api'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              az account set --subscription "$(subscriptionIdFromStage0)"
              Write-Host "Using subscription (spoke): $(subscriptionIdFromStage0)"

              $env:ARM_USE_AZCLI_AUTH = "true"

              # Spoke（前段出力を注入）
              $env:TF_VAR_spoke_vnet_name = "$(spokeVnetNameFromS2)"
              $env:TF_VAR_spoke_rg_name   = "$(spokeRgNameFromS2)"

              # Hub の固定値は terraform/stage4b.../terraform.tfvars に配置済み
              Push-Location "$(Build.SourcesDirectory)\terraform\stage4b-peering-spoke-to-hub"
              try {
                terraform init -no-color
                terraform apply -auto-approve -no-color
              } finally { Pop-Location }
