trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true   # 安定稼働後は false 推奨
  - name: azureServiceConnection
    value: snp-pipeline-api-wif   # ここを既存の Service Connection 名に合わせる

stages:
- stage: provision_all
  displayName: Provision Subscription + Network (Simplified)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:
      - checkout: self

      - task: TerraformInstaller@1
        displayName: Install Terraform 1.7.5
        inputs:
          terraformVersion: 1.7.5

      # Step0: サブスクリプション（新規作成 or 既存再利用）
      - task: AzureCLI@2
        name: step0
        displayName: Step0 - Subscription (create or reuse)
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'

            $tfDir = "$(Build.SourcesDirectory)/terraform"
            Write-Host "Terraform dir: $tfDir"

            # --- tfvars パース関数 ---
            function Get-TfVar {
              param([string]$Path,[string]$Key)
              if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
              $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
              if (-not $line) { return "" }
              $val = $line -replace "^\s*$Key\s*=\s*", ""
              if ($val -match "#") { $val = ($val -split "#")[0] }
              $val.Trim().Trim('"')
            }

            function Get-SubscriptionIdFromAlias([string]$Alias) {
              if (-not $Alias) { return "" }
              foreach ($cmd in @(
                { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
                { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
              )) {
                try {
                  $v = & $cmd
                  if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
                } catch {}
              }
              return ""
            }

            function Wait-For-ARM([string]$SubId, [int]$Seconds = 240) {
              $tries = [Math]::Ceiling($Seconds / 10)
              for ($i=1; $i -le $tries; $i++) {
                try {
                  az rest --method get --url "https://management.azure.com/subscriptions/$SubId?api-version=2020-01-01" | Out-Null
                  Write-Host "[Step0] ARM visibility confirmed"
                  return
                } catch {
                  Write-Host "[Step0] waiting ARM visibility... ($i/$tries)"
                  Start-Sleep -Seconds 10
                }
              }
              throw "Subscription not visible in ARM after $Seconds seconds: $SubId"
            }

            function Wait-For-AzCliVisibility([string]$SubId, [int]$MaxMinutes = 10) {
              $max = [Math]::Ceiling(($MaxMinutes*60) / 15)
              for ($i=1; $i -le $max; $i++) {
                $hit = az account list --refresh --query "[?id=='$SubId'].id" -o tsv
                $tokenOk = $false
                try { az account get-access-token --subscription $SubId -o none 2>$null; if ($LASTEXITCODE -eq 0) { $tokenOk = $true } } catch {}
                if ($hit -and $tokenOk) {
                  Write-Host "[Step0] Azure CLI visibility confirmed"
                  return
                }
                Write-Host "[Step0] waiting Azure CLI visibility... ($i/$max)"
                Start-Sleep -Seconds 15
              }
              throw "Azure CLI did not recognize subscription within $MaxMinutes minutes: $SubId"
            }

            $tfvars = Join-Path $tfDir "terraform.tfvars"
            if (-not (Test-Path $tfvars)) { throw "terraform.tfvars missing." }

            $aliasName   = Get-TfVar $tfvars "subscription_alias_name"
            $dispName    = Get-TfVar $tfvars "subscription_display_name"
            $createRaw   = Get-TfVar $tfvars "create_subscription"
            $createFlag  = if ($createRaw -match '^(?i:true|1)$') { $true } else { $false }
            $spokeIdInTf = Get-TfVar $tfvars "spoke_subscription_id"
            $hubSubId    = Get-TfVar $tfvars "hub_subscription_id"
            if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

            Write-Host "Parsed: create_subscription=$createFlag alias=$aliasName existingSpokeId='$spokeIdInTf' hub_subscription_id=$hubSubId"

            $finalSubId = ""
            $aliasCreatedNew = "false"

            if (-not $createFlag) {
              if (-not $spokeIdInTf) { throw "create_subscription=false の場合は spoke_subscription_id が必須" }
              $finalSubId = $spokeIdInTf
              Write-Host "Using provided existing subscription: $finalSubId"
            } else {
              if ($spokeIdInTf) {
                Write-Warning "create_subscription=true ですが spoke_subscription_id が指定されています。既存IDを優先します。"
                $finalSubId = $spokeIdInTf
              } else {
                $reuseId = Get-SubscriptionIdFromAlias $aliasName
                if ($reuseId) {
                  Write-Host "Alias already exists. Reuse subscriptionId=$reuseId"
                  $finalSubId = $reuseId
                } else {
                  if (-not $aliasName) { throw "subscription_alias_name is empty; cannot create." }
                  Write-Host "Creating new subscription via Terraform (targeted alias)."
                  Push-Location $tfDir
                  try {
                    terraform init -no-color
                    if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }

                    terraform apply -no-color -auto-approve -target azapi_resource.subscription[0]
                    if ($LASTEXITCODE -ne 0) { throw "terraform apply (alias target) failed" }

                    $subOut = Get-SubscriptionIdFromAlias $aliasName
                    if (-not $subOut) {
                      $subOut = terraform output -raw subscription_id 2>$null
                    }
                    if (-not $subOut) { throw "Could not resolve subscription id after creation." }
                    $finalSubId = $subOut.Trim()
                    $aliasCreatedNew = "true"

                    terraform state show azapi_resource.subscription[0] 1>$null 2>$null
                    if ($LASTEXITCODE -eq 0) {
                      Write-Host "Removing alias resource from state to prevent destroy in later full applies."
                      terraform state rm azapi_resource.subscription[0] | Out-Null
                    }

                    @(
                      'create_subscription = false'
                      'spoke_subscription_id = "' + $finalSubId + '"'
                    ) | Set-Content -Encoding UTF8 (Join-Path $tfDir "override.auto.tfvars")
                    Write-Host "override.auto.tfvars written with final subscription id."
                  } finally {
                    Pop-Location
                  }

                  Wait-For-ARM $finalSubId 240
                  Wait-For-AzCliVisibility $finalSubId 10
                }
              }
            }

            if (-not $finalSubId) { throw "final subscription id could not be resolved." }

            Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
            Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"
            Write-Host "##vso[task.setvariable variable=aliasCreatedNew]$aliasCreatedNew"

            Write-Host "Resolved finalSpokeSubscriptionId=$finalSubId (aliasCreatedNew=$aliasCreatedNew)"

      # Step1: RG
      - task: AzureCLI@2
        displayName: Step1 - Resource Group
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $subId = "$(finalSpokeSubscriptionId)"

            $ok = $false
            for ($i=1; $i -le 12; $i++) {
              try {
                az account set --subscription $subId
                az account get-access-token --subscription $subId -o none
                if ($LASTEXITCODE -eq 0) { $ok = $true; break }
              } catch {}
              Start-Sleep -Seconds 10
            }
            if (-not $ok) { throw "Azure CLI is not ready for subscription: $subId" }

            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_resource_group.rg
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "RG apply failed" }
            } finally { Pop-Location }

      # Step2: VNet
      - task: AzureCLI@2
        displayName: Step2 - VNet
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve -target azurerm_virtual_network.vnet
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "VNet apply failed" }
            } finally { Pop-Location }

      # Step3: Subnet + NSG
      - task: AzureCLI@2
        displayName: Step3 - Subnet + NSG
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true") {
                terraform apply -no-color -auto-approve `
                  -target azurerm_network_security_group.subnet_nsg `
                  -target azurerm_subnet.subnet `
                  -target azurerm_subnet_network_security_group_association.subnet_assoc
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full apply"
                  terraform apply -no-color -auto-approve
                }
              } else {
                terraform apply -no-color -auto-approve
              }
              if ($LASTEXITCODE -ne 0) { throw "Subnet/NSG apply failed" }
            } finally { Pop-Location }

      # Step4a: Peering Hub -> Spoke (Hub側サブスクリプションで実行)
      - task: AzureCLI@2
        displayName: Step4a - Peering Hub->Spoke
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            $hubSub = "$(hubSubscriptionId)"
            if (-not $hubSub) { throw "hubSubscriptionId variable not set" }
            az account set --subscription $hubSub
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Hub->Spoke apply failed" }
            } finally { Pop-Location }

      # Step4b: Peering Spoke -> Hub
      - task: AzureCLI@2
        displayName: Step4b - Peering Spoke->Hub
        env:
          ARM_USE_AZCLI_AUTH: 'true'
          ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
          TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
          TF_VAR_create_subscription: false
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference='Stop'
            az account set --subscription "$(finalSpokeSubscriptionId)"
            Push-Location "$(Build.SourcesDirectory)/terraform"
            try {
              terraform init -no-color
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "Peering Spoke->Hub apply failed" }
            } finally { Pop-Location }