# subscription-api / azure-pipelines.yml
# Single-stage (Steps only) pipeline using ONE terraform root: $(Build.SourcesDirectory)\terraform
# Eliminates errors caused by nonexistent per-stage subdirectories (stage1-rg, stage2-vnet, etc.).
# Uses targeted applies to emulate sequential stages:
#   Step0  (optional) : Create / import Subscription Alias (azapi_resource.subscription[0])
#   Step1  : Resource Group (azurerm_resource_group.rg)
#   Step2  : VNet (azurerm_virtual_network.vnet)
#   Step3  : Subnet + NSG (+ association)
#   Step4a : Peering Hub->Spoke (azurerm_virtual_network_peering.hub_to_spoke)
#   Step4b : Peering Spoke->Hub (azurerm_virtual_network_peering.spoke_to_hub)
#   Verify : Peering verification
#
# Notes:
# - create_subscription=true AND no spoke_subscription_id in tfvars -> Step0 runs.
# - create_subscription=false OR spoke_subscription_id already set -> Step0 skipped.
# - Passes final subscription id to Terraform via TF_VAR_spoke_subscription_id.
# - Set USE_TARGETED_APPLY=false to run full apply (useful for debugging / convergence).
# - Assumes main.tf has the resource logical names exactly as referenced.
#
# Future enhancements (optional):
# - Introduce remote backend for persistent state.
# - Add a final convergence apply (full plan/apply) after all targeted steps.

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: true
  - name: USE_TARGETED_APPLY
    value: true

stages:
- stage: provision_all
  displayName: Provision (Subscription->RG->VNet->Subnet->Peering)
  jobs:
  - job: terraform_job
    displayName: Terraform Orchestration
    steps:

    - checkout: self

    - task: TerraformInstaller@1
      displayName: Install Terraform 1.7.5
      inputs:
        terraformVersion: 1.7.5

    - powershell: |
        Write-Host "Agent Name  : $env:AGENT_NAME"
        Write-Host "Agent OS    : $env:AGENT_OS"
        Write-Host "Agent Ver   : $env:AGENT_VERSION"
      displayName: Show Agent Info

    - powershell: |
        $tfDir = "$(Build.SourcesDirectory)\terraform"
        Write-Host "Terraform Root: $tfDir"
        $example = Join-Path $tfDir "terraform.tfvars.example"
        $target  = Join-Path $tfDir "terraform.tfvars"
        if (-not (Test-Path $target) -and (Test-Path $example)) {
          Copy-Item $example $target
          Write-Host "Copied terraform.tfvars.example -> terraform.tfvars"
        }
        Write-Host "##vso[task.setvariable variable=tfDir]$tfDir"
      displayName: Prepare tfvars (optional copy)
      continueOnError: true

    - task: PowerShell@2
      name: prep
      displayName: Parse tfvars / set initial variables
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $tfDir  = "$(tfDir)"
          $tfvars = Join-Path $tfDir "terraform.tfvars"
          if (-not (Test-Path $tfDir))  { throw "Terraform dir not found: $tfDir" }
          if (-not (Test-Path $tfvars)) { throw "terraform.tfvars not found: $tfvars" }

          function Get-TfVar {
            param([string]$Path,[string]$Key)
            $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
            if (-not $line) { return "" }
            $val = $line -replace "^\s*$Key\s*=\s*", ""
            if ($val -match "#") { $val = ($val -split "#")[0] }
            $val.Trim().Trim('"')
          }

          $create = Get-TfVar $tfvars "create_subscription"
          $create = if ($create -match '^(?i:true|1)$') { 'true' } else { 'false' }

          $aliasName = Get-TfVar $tfvars "subscription_alias_name"
          $spokeId   = Get-TfVar $tfvars "spoke_subscription_id"

          Write-Host "Parsed: create_subscription=$create alias=$aliasName spoke_subscription_id=$spokeId"

          Write-Host "##vso[task.setvariable variable=createSubscriptionFlag]$create"
          Write-Host "##vso[task.setvariable variable=aliasName]$aliasName"
          Write-Host "##vso[task.setvariable variable=spokeSubIdFromTfvars]$spokeId"

    - task: AzureCLI@2
      name: step0
      displayName: Step0 - Ensure Subscription (alias)
      condition: and(succeeded(), eq(variables.createSubscriptionFlag, 'true'), eq(variables.spokeSubIdFromTfvars, ''))
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $tfDir = "$(tfDir)"
          $alias = "$(aliasName)"
          if (-not $alias) { throw "subscription_alias_name missing" }

          $targetAddress = "azapi_resource.subscription[0]"
          $aliasRid = "/providers/Microsoft.Subscription/aliases/$alias"

          function GetSubId([string]$Alias) {
            if (-not $Alias) { return "" }
            foreach ($cmd in @(
              { az account alias show --name $Alias --query "properties.subscriptionId" -o tsv 2>$null },
              { az resource show --ids "/providers/Microsoft.Subscription/aliases/$Alias" --api-version 2021-10-01 --query "properties.subscriptionId" -o tsv 2>$null }
            )) {
              try {
                $v = & $cmd
                if ($LASTEXITCODE -eq 0 -and $v) { return $v.Trim() }
              } catch {}
            }
            return ""
          }

          function ImportAlias {
            try {
              Push-Location $tfDir
              terraform init -no-color | Out-Null
              terraform import -no-color $targetAddress $aliasRid 2>$null
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "terraform import failed (ignored)."
                $global:LASTEXITCODE = 0
              }
            } finally {
              Pop-Location
            }
          }

          $existing = GetSubId $alias
          if ($existing) {
            Write-Host "Alias already exists subId=$existing (skip creation)."
            ImportAlias
            Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$existing"
            exit 0
          }

          Write-Host "Creating subscription alias: $alias"
          Push-Location $tfDir
          $applyOk = $false
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }
            terraform apply -no-color -auto-approve -target=$targetAddress
            if ($LASTEXITCODE -eq 0) { $applyOk = $true } else {
              Write-Warning "terraform apply exit $LASTEXITCODE (will poll anyway)"
            }
          } catch {
            Write-Warning "Apply exception: $($_.Exception.Message)"
          } finally { Pop-Location }

          $subId = ""
          for ($i=0; $i -lt 36 -and -not $subId; $i++) {
            $subId = GetSubId $alias
            if ($subId) { break }
            Start-Sleep -Seconds 10
          }
          if (-not $subId) { throw "SubscriptionId not resolved after 360s (alias=$alias)" }

          if (-not $applyOk) {
            Write-Host "Importing alias into state (apply not confirmed)."
            ImportAlias
          }

          Write-Host "subscriptionId=$subId"
          Write-Host "##vso[task.setvariable variable=spokeSubscriptionId;isOutput=true]$subId"
          exit 0

    - task: PowerShell@2
      name: decideSub
      displayName: Decide Spoke Subscription ID
      inputs:
        targetType: inline
        script: |
          $ErrorActionPreference='Stop'
          $created = "$(step0.spokeSubscriptionId)"
          $fromVars = "$(spokeSubIdFromTfvars)"
          $final = if ($created) { $created } else { $fromVars }
          if (-not $final) {
            if ("$(createSubscriptionFlag)" -eq "true") {
              throw "Subscription ID not resolved after Step0."
            } else {
              throw "spoke_subscription_id must be set in tfvars when create_subscription=false."
            }
          }
          Write-Host "Resolved Spoke Subscription ID: $final"
          Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$final"

    # Helper apply function (defined inline each step to avoid state loss)
    - powershell: |
        function Invoke-TerraformStep {
          param(
            [string]$Dir,
            [string[]]$Targets
          )
          Push-Location $Dir
          try {
            terraform init -no-color
            if ($LASTEXITCODE -ne 0) { throw "terraform init failed" }

            $useTarget = ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0)
            if (-not $useTarget) {
              Write-Host "Full apply (targets disabled or none supplied)"
              terraform apply -no-color -auto-approve
              if ($LASTEXITCODE -ne 0) { throw "terraform apply failed" }
            } else {
              $args = @("apply","-no-color","-auto-approve")
              foreach ($t in $Targets) { $args += "-target=$t" }
              Write-Host "Targeted apply: $($Targets -join ', ')"
              terraform @args
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Targeted apply failed (exit $LASTEXITCODE). Fallback full apply..."
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "Fallback full apply failed" }
              }
            }
          } finally {
            Pop-Location
          }
        }
        Write-Host "Helper function loaded."
      displayName: Load helper function

    - task: AzureCLI@2
      displayName: Step1 - Resource Group
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          $subId = "$(finalSpokeSubscriptionId)"
          if (-not $subId) { throw "finalSpokeSubscriptionId missing" }
          az account set --subscription $subId
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_resource_group.rg")

      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)

    - task: AzureCLI@2
      displayName: Step2 - VNet
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network.vnet")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)

    - task: AzureCLI@2
      displayName: Step3 - Subnet + NSG
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @(
            "azurerm_network_security_group.subnet_nsg",
            "azurerm_subnet.subnet",
            "azurerm_subnet_network_security_group_association.subnet_assoc"
          )
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)

    - task: AzureCLI@2
      displayName: Step4a - Peering Hub->Spoke
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          # Use hub subscription ID from tfvars inside Terraform (var.hub_subscription_id)
          az account set --subscription "$(finalSpokeSubscriptionId)"  # CLI context not critical for hub provider (uses var)
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network_peering.hub_to_spoke")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)

    - task: AzureCLI@2
      displayName: Step4b - Peering Spoke->Hub
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          function Invoke-TerraformStep { param([string]$Dir,[string[]]$Targets)
            Push-Location $Dir; try {
              terraform init -no-color
              if ("$(USE_TARGETED_APPLY)" -eq "true" -and $Targets.Count -gt 0) {
                $args=@("apply","-no-color","-auto-approve"); foreach($t in $Targets){$args+="-target=$t"}
                terraform @args
                if ($LASTEXITCODE -ne 0) {
                  Write-Warning "Targeted apply failed; fallback full"
                  terraform apply -no-color -auto-approve
                  if ($LASTEXITCODE -ne 0) { throw "fallback failed" }
                }
              } else {
                terraform apply -no-color -auto-approve
                if ($LASTEXITCODE -ne 0) { throw "apply failed" }
              }
            } finally { Pop-Location } }
          Invoke-TerraformStep -Dir $tfDir -Targets @("azurerm_virtual_network_peering.spoke_to_hub")
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)

    - task: AzureCLI@2
      displayName: Verify Peering (spoke-to-hub)
      inputs:
        azureSubscription: snp-pipeline-api
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference='Stop'
          az account set --subscription "$(finalSpokeSubscriptionId)"
          $tfDir = "$(tfDir)"
          Push-Location $tfDir
          try {
            terraform init -no-color | Out-Null
            terraform show -json | Out-File tfstate.json -Encoding UTF8
          } finally { Pop-Location }
          $json = Get-Content "$tfDir\tfstate.json" -Raw | ConvertFrom-Json
          $vnetRes = $json.values.root_module.resources |
            Where-Object { $_.type -eq "azurerm_virtual_network" } |
            Select-Object -First 1
          if (-not $vnetRes) { throw "No VNet resource found in state for verification." }
          $spokeVnet = $vnetRes.values.name
          $spokeRg   = $vnetRes.values.resource_group_name
          $state = az network vnet peering show `
            --resource-group $spokeRg `
            --vnet-name $spokeVnet `
            --name "spoke-to-hub" `
            --query peeringState -o tsv 2>$null
          if (-not $state) { throw "Peering 'spoke-to-hub' not found (RG=$spokeRg VNet=$spokeVnet)" }
          Write-Host "Peering 'spoke-to-hub' state: $state"
      env:
        ARM_USE_AZCLI_AUTH: 'true'
        TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)