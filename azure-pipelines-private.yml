# ===========================================================
# Azure DevOps Pipeline (Private): 
# ===========================================================

parameters:
  - name: environment_id
    type: string
    default: dev
    values: [cmn, dev, stg, prd]
  - name: project_name
    type: string
    default: bft
  - name: email
    type: string
    default: ""   
  - name: management_group_id
    type: string
    default: "/providers/Microsoft.Management/managementGroups/mg-bft-test"

trigger: none
pr: none

pool:
  vmImage: windows-2022

variables:
  - name: System.Debug
    value: false
  - name: azureServiceConnection
    value: snp-pipeline-api-wif
  - name: tfWorkingDir
    value: $(Build.SourcesDirectory)/terraform/private
  - name: vnet_type
    value: private

stages:
  - stage: provision_private
    displayName: Provision (Private)
    jobs:
      - job: terraform_job_private
        displayName: Terraform apply (private)
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: Install Terraform 1.7.5
            inputs:
              terraformVersion: 1.7.5

          # Step0: サブスクリプション作成または既存採用 → finalSpokeSubscriptionId を設定
          - task: AzureCLI@2
            name: step0
            displayName: Step0 - Subscription (create or reuse)
            env:
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_vnet_type: $(vnet_type)
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                $tfDir = "$(tfWorkingDir)"

                function Get-TfVar {
                  param([string]$Path,[string]$Key)
                  if (-not (Test-Path $Path)) { throw "tfvars not found: $Path" }
                  $line = Get-Content -LiteralPath $Path | Where-Object { $_ -match "^\s*$Key\s*=" } | Select-Object -First 1
                  if (-not $line) { return "" }
                  $val = $line -replace "^\s*$Key\s*=\s*", ""
                  if ($val -match "#") { $val = ($val -split "#")[0] }
                  $val.Trim().Trim('"')
                }

                function Is-Guid([string]$s) { return $s -match '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$' }

                function Slugify([string]$s) {
                  if (-not $s) { return "" }
                  $t = $s.Trim().ToLower()
                  $t = $t -replace " ", "-" -replace "_", "-" -replace "\.", "-" -replace "/", "-" -replace "\\", "-"
                  $t = $t -replace "[^0-9a-z\-]", "-"
                  return $t.Trim("-")
                }

                function Build-Base([string]$project,[string]$env,[string]$regionCode,[string]$seq) {
                  $p1 = Slugify $project
                  $parts = @($p1,$env,$regionCode,$seq) | Where-Object { $_ -and $_.Trim() -ne "" }
                  return ($parts -join "-")
                }

                function Get-AliasName($tfvarsPath) {
                  $explicit = Get-TfVar $tfvarsPath "subscription_alias_name"
                  if ($explicit) { return $explicit }
                  $projectParam = "${{ parameters.project_name }}"
                  $envId   = "${{ parameters.environment_id }}"
                  $regionCode = Get-TfVar $tfvarsPath "region_code"
                  $seq     = Get-TfVar $tfvarsPath "sequence"
                  $base    = Build-Base $projectParam $envId $regionCode $seq
                  if (-not $base) { throw "cannot build alias base (check tfvars: region_code/sequence)" }
                  return "alias-$base"
                }

                function Get-AliasStateField([string]$field){
                  $out = terraform state show azapi_resource.subscription[0] 2>$null
                  if (-not $out) { return $null }
                  $m = $out | Select-String -Pattern "^\s*$field\s*=\s*""([^""]+)""" | Select-Object -First 1
                  if ($m) { return $m.Matches[0].Groups[1].Value }
                  return $null
                }

                function Try-GetSubIdViaAliasIdFromState {
                  $aliasId = Get-AliasStateField "id"
                  if (-not $aliasId) { return $null }
                  $uri = "https://management.azure.com$aliasId?api-version=2021-10-01"
                  $sid = az rest --method get --uri $uri --query "properties.subscriptionId" -o tsv 2>$null
                  if ($sid -and (Is-Guid $sid)) { return $sid }
                  return $null
                }

                function Try-GetSubIdViaAliasName([string]$aliasName) {
                  $uri = "https://management.azure.com/providers/Microsoft.Subscription/aliases/$aliasName?api-version=2021-10-01"
                  $sid = az rest --method get --uri $uri --query "properties.subscriptionId" -o tsv 2>$null
                  if ($sid -and (Is-Guid $sid)) { return $sid }
                  return $null
                }

                $tfvars = Join-Path $tfDir "terraform.tfvars"
                $hubSubId = Get-TfVar $tfvars "hub_subscription_id"
                if (-not $hubSubId) { throw "hub_subscription_id must be set in tfvars." }

                $createSub = Get-TfVar $tfvars "create_subscription"
                $finalSubId = Get-TfVar $tfvars "spoke_subscription_id"

                if ($createSub -eq "true") {
                  Push-Location $tfDir
                  try {
                    terraform init -no-color -input=false

                    terraform apply -no-color -input=false -auto-approve -target "azapi_resource.subscription[0]"
                    if ($LASTEXITCODE -ne 0) { throw "subscription create failed" }

                    terraform apply -no-color -input=false -auto-approve -target "data.azapi_resource.subscription_get[0]"
                    if ($LASTEXITCODE -ne 0) { throw "read alias (data) failed" }

                    $createdSubId = $null
                    $aliasName = Get-AliasName $tfvars

                    for ($i=1; $i -le 36 -and -not $createdSubId; $i++) {
                      try {
                        $raw = terraform output -raw created_subscription_id 2>$null
                        if ($raw -and (Is-Guid $raw)) { $createdSubId = $raw }
                      } catch {}

                      if (-not $createdSubId) { $createdSubId = Try-GetSubIdViaAliasIdFromState }
                      if (-not $createdSubId -and $aliasName) { $createdSubId = Try-GetSubIdViaAliasName -aliasName $aliasName }

                      if (-not $createdSubId) {
                        Write-Host "[Step0] Waiting subscriptionId... ($i/36)"
                        Start-Sleep -Seconds 10
                      }
                    }

                    if (-not $createdSubId) { throw "created_subscription_id could not be retrieved after creation (timed out)." }

                    for ($j=1; $j -le 60; $j++) {
                      az account list --refresh 1>$null 2>$null
                      az account show --subscription $createdSubId -o none 2>$null
                      if ($LASTEXITCODE -eq 0) { break }
                      Start-Sleep -Seconds 10
                    }

                    Write-Host "Created SubscriptionId: $createdSubId"
                    Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$createdSubId"
                  } finally { Pop-Location }
                } elseif ($createSub -eq "false") {
                  if (-not $finalSubId) { throw "spoke_subscription_id missing for existing subscription use." }
                  if (-not (Is-Guid $finalSubId)) { throw "spoke_subscription_id must be a GUID. Actual: $finalSubId" }
                  Write-Host "##vso[task.setvariable variable=finalSpokeSubscriptionId]$finalSubId"
                } else { throw "create_subscription must be true or false in tfvars." }

                Write-Host "##vso[task.setvariable variable=hubSubscriptionId]$hubSubId"

          # Step1: 依存基盤（RG/VNet/Subnets/NSGs/Association）を先行適用
          - task: AzureCLI@2
            displayName: Step1 - Target apply (RG/VNet/Subnets/NSGs)
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}
              TF_VAR_vnet_type: $(vnet_type)
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'

                # email(=subscription_owner_emails) を必要時のみ JSON 配列に補正
                $raw = '${{ parameters.email }}'
                if ($raw -and $raw.Trim() -ne "") {
                  try {
                    $tmp = $raw | ConvertFrom-Json -ErrorAction Stop
                    if ($tmp -isnot [System.Array]) {
                      $env:TF_VAR_subscription_owner_emails = ('["' + ($raw.Trim('"')) + '"]')
                    } else {
                      $env:TF_VAR_subscription_owner_emails = $raw
                    }
                  } catch {
                    $env:TF_VAR_subscription_owner_emails = ('["' + ($raw.Trim('"')) + '"]')
                  }
                }

                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(tfWorkingDir)"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target="module.groups.azuread_group.admin" `
                    -target="module.groups.azuread_group.developer" `
                    -target="module.groups.azuread_group.operator" `
                    -target="module.groups.azurerm_role_assignment.rg_owner_admin" `
                    -target="module.groups.azuread_group_member.admin_members" `
                    -target="module.resource_group.azurerm_resource_group.rg" `
                    -target="module.vnet.azurerm_virtual_network.vnet" `
                    -target="module.networking.azurerm_subnet.bastion_subnet" `
                    -target="module.networking.azurerm_subnet.subnet" `
                    -target="module.networking.azurerm_network_security_group.subnet_nsg" `
                    -target="module.networking.azurerm_network_security_group.bastion_nsg" `
                    -target='module.networking.azurerm_network_security_rule.subnet_rules["AllowGatewayManagerInbound"]' `
                    -target='module.networking.azurerm_network_security_rule.subnet_rules["AllowAzureLoadBalancerInbound"]' `
                    -target='module.networking.azurerm_network_security_rule.subnet_rules["AllowBastionHostCommunication"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowInbound"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowGatewayManager"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowAzureLoadBalancer"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowBastionHostCommunications"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowSshRdpOutbound"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowAzureCloudOutbound"]' `
                    -target='module.networking.azurerm_network_security_rule.bastion_rules["AllowBastionCommunication"]' `
                    -target="module.networking.azurerm_subnet_network_security_group_association.subnet_assoc" `
                    -target="module.networking.azurerm_subnet_network_security_group_association.bastion_assoc" `
                    -target="module.bastion.azurerm_public_ip.bastion_pip" `
                    -target="module.bastion.azurerm_bastion_host.bastion" `
                    -target="module.route-table.azurerm_route_table.route_table_private" `
                    -target="module.route-table.azurerm_route.route_default_to_gateway" `
                    -target="module.route-table.azurerm_route.route_kms1" `
                    -target="module.route-table.azurerm_route.route_kms2" `
                    -target="module.route-table.azurerm_route.route_kms3" `
                    -target="module.route-table.azurerm_subnet_route_table_association.subnet_rt_assoc" `
                    -target="module.vnet-peering.azurerm_virtual_network_peering.hub_to_spoke" `
                    -target="module.vnet-peering.azurerm_virtual_network_peering.spoke_to_hub"
                  if ($LASTEXITCODE -ne 0) { throw "Terraform target apply (infra base) failed" }
                } finally { Pop-Location }

          # Step2: 問題の NSG ルールのみ先行適用（AllowBastionInbound）
          - task: AzureCLI@2
            displayName: Step2 - Target apply (NSG rule:AllowBastionInbound)
            env:
              ARM_USE_AZCLI_AUTH: 'true'
              ARM_SUBSCRIPTION_ID: $(finalSpokeSubscriptionId)
              TF_VAR_spoke_subscription_id: $(finalSpokeSubscriptionId)
              TF_VAR_create_subscription: false
              TF_VAR_project_name: ${{ parameters.project_name }}
              TF_VAR_environment_id: ${{ parameters.environment_id }}
              TF_VAR_management_group_id: ${{ parameters.management_group_id }}
              TF_VAR_vnet_type: $(vnet_type)
              TF_INPUT: 'false'
              TF_IN_AUTOMATION: 'true'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference='Stop'
                az account set --subscription $env:ARM_SUBSCRIPTION_ID
                Push-Location "$(tfWorkingDir)"
                try {
                  terraform init -no-color -input=false
                  terraform apply -no-color -input=false -auto-approve `
                    -target='module.networking.azurerm_network_security_rule.subnet_rules["AllowBastionInbound"]'
                  if ($LASTEXITCODE -ne 0) { throw "Terraform target apply (NSG rule patch) failed" }
                } finally { Pop-Location }

